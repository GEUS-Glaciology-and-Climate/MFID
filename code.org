#+PROPERTY: header-args: :comments both
#+PROPERTY: header-args:bash :eval no-export :noweb yes :session CCI
#+PROPERTY: header-args:python :eval no-export :noweb yes :session CCI :kernel sci
#+PROPERTY: header-args: :session CCI

* README                                                :noexport:

This document is an Emacs Org Mode plain-text file with code and text embedded.
The purpose of the code is to calculate the mass flux ice discharge (MFID) for ESA CCI+ Greenland, Phase 2.
It is based on the work flow created by Ken Mankoff for the PROMICE Solid Ice Discharge product: Mankoff, Ken; Solgaard, Anne; Larsen, Signe, 2020, "Greenland Ice Sheet solid ice discharge from 1986 through last month: Discharge", https://doi.org/10.22008/promice/data/ice_discharge/d/v02, GEUS Dataverse, V101,
and the previous phases of ESA CCI.

** Workflow

To recreate this work

+ check that you have the necessary software dependencies installed. See section: [[*Code][Code]].
  + In Phase 2 the code was updated to partly run via a docker image limiting the required software packages.
  + Much the code can be run via a Makefile which uses docker - requires docker is installed and a user is logged in
+ Download and set up the necessary data files used throughout the [[*Input data][Input data]] section.
+ Make sure to define DATADIR: (for example: export DATADIR=/mnt/netapp/glaciologi/MFID_ESA_CCI/data)
+ Open this file in Emacs Org Mode.
+ Tangle the embedded code blocks.
+ Execute =make= to run the contents of the [[#sec:makefile][Makefile]].

* Code                                                  :noexport:
:PROPERTIES:
:header-args:bash+: :comments both
:header-args:bash+: :tangle-mode (identity #o744)
:header-args:bash+: :shebang #!/usr/bin/env bash
:END:

** Docker
*** GRASS
:PROPERTIES:
:header-args:docker: :eval no
:END:
**** Dockerfile

#+BEGIN_SRC docker :tangle docker/grass/Dockerfile :mkdirp docker/grass
FROM ubuntu:20.04

LABEL authors="Signe Hillerup Larsen"
LABEL maintainer="shl@geus.dk"

# system environment
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -y update && apt-get install -y --no-install-recommends --no-install-suggests \
      bc \
      bsdmainutils \
      datamash \
      gdal-bin \
      grass \
      netcdf-bin \
      parallel \
      proj-bin \
      proj-data \
      zip \
      nco \
  && apt-get autoremove -y \
  && apt-get clean -y \ 
  && rm -rf /var/lib/apt/lists/*

RUN echo LANG="en_US.UTF-8" > /etc/default/locale

ENV LANGUAGE en_US.UTF-8
ENV LANG C
ENV LC_ALL C
ENV LC_CTYPE C

ENV SHELL /bin/bash

# create a user
RUN useradd --create-home user && chmod a+rwx /home/user
ENV HOME /home/user
WORKDIR /home/user

RUN mkdir -p /data
ENV DATADIR /data

# switch the user
USER user

CMD ["/usr/bin/grass", "--version"]
#+END_SRC

**** Build
#+BEGIN_SRC bash
# docker build -f Dockerfile_grass -t ice_discharge_grass .
cd docker/grass
docker build -t ice_discharge_grass .
docker run -it ice_discharge_grass # run it
#+END_SRC

**** Test

#+BEGIN_SRC bash
#container_args ?= run -it --cpus 7 --user $(shell id -u):$(shell id -g) --mount type=bind,src=$${DATADIR},dst=/data --mount type=bind,src=$(shell pwd),dst=/work --env PARALLEL="--delay 0.1" ice_discharge_grass
#+END_SRC

**** Deploy

#+BEGIN_SRC bash
# docker tag local-image:tagname new-repo:tagname
docker tag ice_discharge_grass hillerup/ice_discharge:grass
docker push hillerup/ice_discharge:grass
#+END_SRC


*** Python
:PROPERTIES:
:header-args:docker: :eval no
:END:

**** Dockerfile and supporting files

#+BEGIN_SRC docker :tangle docker/conda/Dockerfile :mkdirp docker/conda
FROM continuumio/miniconda3

RUN conda install \
  curl \
  cython \
  ipython \
  jupyter \
  matplotlib \
  numpy \
  pandas \
  pip \
  scipy \
  statsmodels \
  tabulate \
  xarray \
  && conda clean -a \
  && pip install --no-cache-dir \
  cfchecker \
  cfunits \
  grass-session \
  nc-time-axis \
  pyshp \
  semver \
  uncertainties \
  git+https://github.com/aussda/pyDataverse.git@3b040ff23b665ec2650bebcf4bd5478de6881af0

# create a user
RUN useradd --create-home user && chmod a+rwx /home/user
ENV HOME /home/user
WORKDIR /home/user

RUN mkdir -p /data
ENV DATADIR /data

# switch the user
USER user


# create a user
# RUN useradd -m -U user

# RUN chmod a+rwx /home/user
# ENV HOME /home/user
# RUN mkdir -p /data /work
# WORKDIR /work

# switch the user
# USER user

# RUN mkdir -p /data /work
# WORKDIR /work

# The code to run when container is started:
# ENTRYPOINT ["conda", "run", "-n", "ice_discharge", "python3"]

# For interactive shell
# RUN conda init bash
# RUN echo "conda activate ice_discharge" >> /root/.bashrc
#+END_SRC

**** Build
#+BEGIN_SRC bash
cd docker/conda
dockyer build -t ice_discharge_conda .
docker tag ice_discharge_conda:latest hillerup/ice_discharge:conda
docker run -it --mount type=bind,src=$(pwd),dst=/work hillerup/ice_discharge:conda python -c 'import pandas as pd; print(pd)'
#+END_SRC

**** Deploy

#+BEGIN_SRC bash
# docker tag local-image:tagname new-repo:tagname
docker tag ice_discharge_conda hillerup/ice_discharge:conda
docker push hillerup/ice_discharge:conda
#+END_SRC

**** enviroment.yml

It is more reproducible to use the Docker image =mankoff/ice_discharge:conda=, but for record-keeping sake, here is the Python environmnet.

#+BEGIN_SRC bash :results verbatim
docker run hillerup/ice_discharge:conda conda env export -n base
#+END_SRC

#+RESULTS:




** Makefile
:PROPERTIES:
:CUSTOM_ID: sec:makefile
:END:

This code, and all code files in this project, are derived products tangled from the ice_discharge.org source file.

#+BEGIN_SRC makefile :tangle Makefile
container_cmd ?= docker
container_args ?= run --user $(shell id -u):$(shell id -g) --mount type=bind,src=${DATADIR},dst=/data --mount type=bind,src=$(shell pwd),dst=/home/user --env PARALLEL="--delay 0.1 -j -1"


all: docker G GRASS PYTHON dist


docker: FORCE ## Pull down Docker environment
	docker pull hillerup/ice_discharge:grass
	${container_cmd} ${container_args} hillerup/ice_discharge:grass
	docker pull hillerup/ice_discharge:conda
	${container_cmd} ${container_args} hillerup/ice_discharge:conda conda env export -n base


G:
	grass -e -c EPSG:3413 ./G


import: FORCE
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./import.sh
	
GRASS: FORCE
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./import.sh
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./gate_IO_runner.sh
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./vel_eff.sh
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./export.sh


PYTHON: FORCE
	${container_cmd} ${container_args} hillerup/ice_discharge:conda python ./errors.py
	${container_cmd} ${container_args} hillerup/ice_discharge:conda python ./raw2discharge.py
	${container_cmd} ${container_args} hillerup/ice_discharge:grass grass ./G/PERMANENT --exec ./gate_export.sh
	mkdir -p figs
	${container_cmd} ${container_args} hillerup/ice_discharge:conda python ./figures.py

dist:
	ln -s out CCI
	zip -r CCI.zip CCI
	rm CCI

FORCE: # dummy target

clean:
	rm -fR G tmp out figs CCI.zip
#+END_SRC
#+RESULTS:
: 
: 81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux



** Misc Helper
*** Support pretty messages
#+NAME: MSGS_pretty_print
#+BEGIN_SRC bash :results verbatim :tangle no
# Convenience functions for pretty printing messages
RED='\033[0;31m'; ORANGE='\033[0;33m'; GREEN='\033[0;32m'; NC='\033[0m' # No Color
MSG_OK() { echo -e "${GREEN}${@}${NC}"; }
MSG_WARN() { echo -e "${ORANGE}WARNING: ${@}${NC}"; }
MSG_ERR() { echo -e "${RED}ERROR: ${@}${NC}" >&2; }
#+END_SRC
#+RESULTS:

*** GRASS config
https://grass.osgeo.org/grass74/manuals/variables.html
#+BEGIN_SRC sh
#sudo mount -o uid=shl@geus.dk,gid=1260400513 /dev/sda1 /media/shl@geus.dk/datadrive
sudo mount -t ntfs-3g -o uid=1260406986,gid=1260400513 /dev/sda1 /media/shl@geus.dk/datadrive
conda activate py38

grass --text ./G/PERMANENT 



#+END_SRC

#+BEGIN_QUOTE
GRASS_VERBOSE
[all modules]
toggles verbosity level
-1 - complete silence (also errors and warnings are discarded)
0 - only errors and warnings are printed
1 - progress and important messages are printed (percent complete)
2 - all module messages are printed
3 - additional verbose messages are printed
#+END_QUOTE

#+NAME: GRASS_config
#+BEGIN_SRC bash :results verbatim :tangle no
export GRASS_VERBOSE=3
# export GRASS_MESSAGE_FORMAT=silent
#export PROJ_LIB=/usr/bin/proj
#export DATADIR=/data #/mnt/netapp/glaciologi/MFID_ESA_CCI/data
if [ -z ${DATADIR+x} ]; then
    echo "DATADIR environment varible is unset."
    echo "Fix with: \"export DATADIR=/path/to/data\""
    exit 255
fi

set -x # print commands to STDOUT before running them
#+END_SRC
#+RESULTS:





** Import Data
:PROPERTIES:
:header-args:bash+: :tangle import.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC
#+RESULTS:

*** Bed and Surface
**** BedMachine v5
+ from [[textcite:Morlighem:2017BedMachine][Morlighem /et al./ (2017)]]
#+BEGIN_SRC bash :results verbatim
MSG_OK "BedMachine"
g.mapset -c BedMachine

#for var in $(echo mask surface thickness bed errbed); do
#  echo $var
#  r.external source=netCDF:${DATADIR}/Morlighem_2017/BedMachineGreenland-v5.nc:${var} output=${var}
#done

for var in surface thickness bed errbed; do
  echo $var
  r.external source="${DATADIR}"/Morlighem_2022/BMv5_3413/${var}.tif output=${var} --o
done
echo $var
r.external source="${DATADIR}"/Morlighem_2022/BMv5_3413/mask_float.tif output=mask -o --o

r.colors -a map=errbed color=haxby

g.mapset PERMANENT
g.region raster=surface@BedMachine res=200 -a -p
g.region -s
g.mapset BedMachine
g.region -dp

r.colors map=mask color=haxby

r.mapcalc "mask_ice = if(mask == 2, 1, null())"
#+END_SRC
#+RESULTS:
**** COMMENT GIMP 0715
#+BEGIN_SRC bash :results verbatim
MSG_OK "GIMP 0715"
g.mapset -c GIMP.0715
ROOT=${DATADIR}/GIMP/0715

# reset
# g.remove -f type=raster name=$(g.list type=raster mapset=. separator=",")

# read in DEM, DAY, and ERR
# for f in $(ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif); do
#   name=$(basename ${f})
#   r.external input=${f} output=${name}
# done
ls ${ROOT}/reg/tile_?_?_reg_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}
ls ${ROOT}/fit/tile_?_?_fit_30m_???.tif | parallel --verbose --bar r.external input={} output={/.}

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_dem separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_dem separator=,) output=dem

# no fit day data to patch holes. We'll assign elevation pixels with DEM data but not DAY data to some day, TBD
r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_day separator=,) output=day

r.patch -s input=$(g.list type=raster pattern=tile_?_?_reg_30m_err separator=,),$(g.list type=raster pattern=tile_?_?_fit_30m_err separator=,) output=err

r.null map=day null=0
#+END_SRC
#+RESULTS:

*** Sectors
**** Mouginot
+ From citet:mouginot_2019_glacier
***** Import & Clean
#+BEGIN_SRC bash :results verbatim
MSG_OK "Mouginot 2019 sectors"

g.mapset -c Mouginot_2019
v.in.ogr input=${DATADIR}/Mouginot_2019 output=sectors_all
v.extract input=sectors_all where="NAME NOT LIKE '%ICE_CAP%'" output=sectors

db.select table=sectors | head
v.db.addcolumn map=sectors columns="region_name varchar(100)"
db.execute sql="UPDATE sectors SET region_name=SUBREGION1 || \"___\" || NAME"

# v.db.addcolumn map=sectors columns="area DOUBLE PRECISION"
v.to.db map=sectors option=area columns=area units=meters

mkdir -p ./tmp/
# db.select table=sectors > ./tmp/Mouginot_2019.txt

v.to.rast input=sectors output=sectors use=cat label_column=region_name
r.mapcalc "mask_GIC = if(sectors)"

# # regions map
v.to.rast input=sectors output=regions_tmp use=cat label_column=SUBREGION1
# which categories exist?
# r.category regions separator=comma | cut -d, -f2 | sort | uniq
# Convert categories to numbers
r.category regions_tmp separator=comma | sed s/NO/1/ | sed s/NE/2/ | sed s/CE/3/ | sed s/SE/4/ | sed s/SW/5/ | sed s/CW/6/ | sed s/NW/7/ > ./tmp/mouginot.cat
r.category regions_tmp separator=comma rules=./tmp/mouginot.cat
# r.category regions_tmp
r.mapcalc "regions = @regions_tmp"

# # region vector 
# r.to.vect input=regions output=regions type=area
# v.db.addcolumn map=regions column="REGION varchar(2)"
# v.what.vect map=regions column=REGION query_map=sectors query_column=SUBREGION1

# # mask
#+END_SRC
#+RESULTS:
***** Test
#+BEGIN_SRC bash :results verbatim :tangle no
grass74 ./G/Mouginot_2019
d.mon start=wx0
d.rast regions
d.rast sectors
d.vect sectors_all fill_color=none color=red
d.vect sectors fill_color=none
#+END_SRC
#+RESULTS:
**** Zwally (expanded)
***** Import & Clean
#+BEGIN_SRC bash :results verbatim
MSG_OK "Zwally 2012 expanded sectors"

g.mapset -c Zwally_2012
v.in.ogr input=${DATADIR}/Zwally_2012/sectors_enlarged output=sectors

db.select table=sectors | head
v.to.rast input=sectors output=sectors use=cat label_column=cat_
r.mapcalc "mask_GIC = if(sectors)"
#+END_SRC

#+RESULTS:
*** 2D Area Error
+ EPSG:3413 has projection errors of \(\pm\) ~8% in Greenland
+ Method
  + Email: [[mu4e:msgid:m2tvxmd2xr.fsf@gmail.com][Re: {GRASS-user} scale error for each pixel]]
  + Webmail: https://www.mail-archive.com/grass-user@lists.osgeo.org/msg35005.html
#+BEGIN_SRC bash :results verbatim
MSG_OK "2D Area Error"
g.mapset PERMANENT

if [[ "" == $(g.list type=raster pattern=err_2D) ]]; then
    r.mask -r
    g.region -d

    g.region res=1000 -ap # do things faster
    r.mapcalc "x = x()" 
    r.mapcalc "y = y()" 
    r.latlong input=x output=lat_low 
    r.latlong -l input=x output=lon_low 

    r.out.xyz input=lon_low,lat_low separator=space > ./tmp/llxy.txt
    PROJSTR=$(g.proj -j)
    echo $PROJSTR

    paste -d" " <(cut -d" " -f1,2 ./tmp/llxy.txt) <(cut -d" " -f3,4 ./tmp/llxy.txt | proj -VS ${PROJSTR} | grep Areal | column -t | sed s/\ \ /,/g | cut -d, -f4) > ./tmp/xy_err.txt

    r.in.xyz input=./tmp/xy_err.txt  output=err_2D_inv separator=space --overwrite
    r.mapcalc "err_2D = 1/(err_2D_inv^0.5)" # convert area error to linear multiplier error
    g.region -d

    r.latlong input=x output=lat # for exporting at full res
    r.latlong -l input=x output=lon
fi

# sayav done
g.region -d
#+END_SRC
#+RESULTS:

*** ENVEO IV
**** Data Intro
:PROPERTIES:
:header-args:bash+: :session ENVEO_provenance
:END:

#+BEGIN_SRC bash :results verbatim :tangle no
# export DATADIR="/media/shl@geus.dk/datadrive/data/ESA_GIS_CCI"
DIR=${DATADIR}/ENVEO/monthly
(cd ${DIR}; ls -FGhol --color *nc)
#+END_SRC

#+RESULTS:
#+begin_example
-rwxrwxrwx 1 shl@geus.dk  50M May 15  2023 greenland_iv_250m_s1_s20141001_e20141031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk  50M May 15  2023 greenland_iv_250m_s1_s20141101_e20141130_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk  61M May 15  2023 greenland_iv_250m_s1_s20141201_e20141231_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 462M May 15  2023 greenland_iv_250m_s1_s20150101_e20150131_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 512M May 15  2023 greenland_iv_250m_s1_s20150201_e20150228_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 145M May 15  2023 greenland_iv_250m_s1_s20150301_e20150331_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk  55M May 15  2023 greenland_iv_250m_s1_s20150401_e20150430_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 196M May 15  2023 greenland_iv_250m_s1_s20150501_e20150531_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 273M May 15  2023 greenland_iv_250m_s1_s20150601_e20150630_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 271M May 15  2023 greenland_iv_250m_s1_s20150701_e20150731_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 334M May 15  2023 greenland_iv_250m_s1_s20150801_e20150831_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 290M May 15  2023 greenland_iv_250m_s1_s20150901_e20150930_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 271M May 15  2023 greenland_iv_250m_s1_s20151001_e20151031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 322M May 15  2023 greenland_iv_250m_s1_s20151101_e20151130_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 494M May 15  2023 greenland_iv_250m_s1_s20151201_e20151231_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 559M May 15  2023 greenland_iv_250m_s1_s20160101_e20160131_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 580M May 15  2023 greenland_iv_250m_s1_s20160201_e20160229_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 527M May 15  2023 greenland_iv_250m_s1_s20160301_e20160331_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 451M May 15  2023 greenland_iv_250m_s1_s20160401_e20160430_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 438M May 15  2023 greenland_iv_250m_s1_s20160501_e20160531_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 358M May 15  2023 greenland_iv_250m_s1_s20160601_e20160630_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 333M May 15  2023 greenland_iv_250m_s1_s20160701_e20160731_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 363M May 15  2023 greenland_iv_250m_s1_s20160801_e20160831_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 412M May 15  2023 greenland_iv_250m_s1_s20160901_e20160930_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 411M May 15  2023 greenland_iv_250m_s1_s20161001_e20161031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 411M May 15  2023 greenland_iv_250m_s1_s20161101_e20161130_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 531M May 15  2023 greenland_iv_250m_s1_s20161201_e20161231_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 593M May 15  2023 greenland_iv_250m_s1_s20170101_e20170131_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 527M May 15  2023 greenland_iv_250m_s1_s20170201_e20170228_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 460M May 15  2023 greenland_iv_250m_s1_s20170301_e20170331_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 449M May 15  2023 greenland_iv_250m_s1_s20170401_e20170430_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 449M May 15  2023 greenland_iv_250m_s1_s20170501_e20170531_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 439M May 15  2023 greenland_iv_250m_s1_s20170601_e20170630_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 429M May 15  2023 greenland_iv_250m_s1_s20170701_e20170731_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 427M May 15  2023 greenland_iv_250m_s1_s20170801_e20170831_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 433M May 15  2023 greenland_iv_250m_s1_s20170901_e20170930_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 437M May 15  2023 greenland_iv_250m_s1_s20171001_e20171031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 436M May 15  2023 greenland_iv_250m_s1_s20171101_e20171130_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 546M May 15  2023 greenland_iv_250m_s1_s20171201_e20171231_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 564M May 15  2023 greenland_iv_250m_s1_s20180101_e20180131_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 562M May 15  2023 greenland_iv_250m_s1_s20180201_e20180228_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 525M May 15  2023 greenland_iv_250m_s1_s20180301_e20180331_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 511M May 15  2023 greenland_iv_250m_s1_s20180401_e20180430_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 445M May 15  2023 greenland_iv_250m_s1_s20180501_e20180531_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 432M May 15  2023 greenland_iv_250m_s1_s20180601_e20180630_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 415M May 15  2023 greenland_iv_250m_s1_s20180701_e20180731_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 418M May 15  2023 greenland_iv_250m_s1_s20180801_e20180831_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 422M May 15  2023 greenland_iv_250m_s1_s20180901_e20180930_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 431M May 15  2023 greenland_iv_250m_s1_s20181001_e20181031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 435M May 15  2023 greenland_iv_250m_s1_s20181101_e20181130_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 567M May 15  2023 greenland_iv_250m_s1_s20181201_e20181231_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 571M May 15  2023 greenland_iv_250m_s1_s20190101_e20190131_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 541M May 15  2023 greenland_iv_250m_s1_s20190201_e20190228_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 499M May 15  2023 greenland_iv_250m_s1_s20190301_e20190331_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 532M May 15  2023 greenland_iv_250m_s1_s20190401_e20190430_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 541M May 15  2023 greenland_iv_250m_s1_s20190501_e20190531_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 453M May 15  2023 greenland_iv_250m_s1_s20190601_e20190630_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 408M May 15  2023 greenland_iv_250m_s1_s20190701_e20190731_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 462M May 15  2023 greenland_iv_250m_s1_s20190801_e20190831_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 469M May 15  2023 greenland_iv_250m_s1_s20190901_e20190930_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 467M May 15  2023 greenland_iv_250m_s1_s20191001_e20191031_v1_2.nc*
-rwxrwxrwx 1 shl@geus.dk 478M May 15  2023 greenland_iv_250m_s1_s20191101_e20191130_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 564M May 15  2023 greenland_iv_250m_s1_s20191201_e20191231_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 580M May 15  2023 greenland_iv_250m_s1_s20200101_e20200131_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 515M May 15  2023 greenland_iv_250m_s1_s20200201_e20200229_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 512M May 15  2023 greenland_iv_250m_s1_s20200301_e20200331_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 448M May 15  2023 greenland_iv_250m_s1_s20200401_e20200430_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 452M May 15  2023 greenland_iv_250m_s1_s20200501_e20200531_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 445M May 15  2023 greenland_iv_250m_s1_s20200601_e20200630_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 410M May 15  2023 greenland_iv_250m_s1_s20200701_e20200731_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 429M May 15  2023 greenland_iv_250m_s1_s20200801_e20200831_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 544M May 15  2023 greenland_iv_250m_s1_s20200901_e20200930_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 520M May 15  2023 greenland_iv_250m_s1_s20201001_e20201031_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 585M May 15  2023 greenland_iv_250m_s1_s20201101_e20201130_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 644M May 15  2023 greenland_iv_250m_s1_s20201201_e20201231_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 645M May 15  2023 greenland_iv_250m_s1_s20210101_e20210131_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 568M May 15  2023 greenland_iv_250m_s1_s20210201_e20210228_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 499M May 15  2023 greenland_iv_250m_s1_s20210301_e20210331_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 529M May 15  2023 greenland_iv_250m_s1_s20210401_e20210430_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 501M May 15  2023 greenland_iv_250m_s1_s20210501_e20210531_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 487M May 15  2023 greenland_iv_250m_s1_s20210601_e20210630_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 425M May 15  2023 greenland_iv_250m_s1_s20210701_e20210731_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 460M May 15  2023 greenland_iv_250m_s1_s20210801_e20210831_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 493M May 15  2023 greenland_iv_250m_s1_s20210901_e20210930_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 506M May 15  2023 greenland_iv_250m_s1_s20211001_e20211031_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 541M May 15  2023 greenland_iv_250m_s1_s20211101_e20211130_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 631M May 15  2023 greenland_iv_250m_s1_s20211201_e20211231_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 626M May 15  2023 greenland_iv_250m_s1_s20220101_e20220131_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 561M May 15  2023 greenland_iv_250m_s1_s20220201_e20220228_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 553M May 15  2023 greenland_iv_250m_s1_s20220301_e20220331_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 476M May 15  2023 greenland_iv_250m_s1_s20220401_e20220430_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 471M May 15  2023 greenland_iv_250m_s1_s20220501_e20220531_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 429M May 15  2023 greenland_iv_250m_s1_s20220601_e20220630_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 417M May 15  2023 greenland_iv_250m_s1_s20220701_e20220731_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 418M May 15  2023 greenland_iv_250m_s1_s20220801_e20220831_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 385M May 15  2023 greenland_iv_250m_s1_s20220901_e20220930_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 405M May 15  2023 greenland_iv_250m_s1_s20221001_e20221031_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 428M May 15  2023 greenland_iv_250m_s1_s20221101_e20221130_v1_3.nc*
-rwxrwxrwx 1 shl@geus.dk 463M May 15  2023 greenland_iv_250m_s1_s20221201_e20221231_v1_3.nc*
#+end_example
 
#+BEGIN_SRC bash :results verbatim :tangle no
(cd ${DIR}; ncdump -h $(ls *.nc | head -n1))
#+END_SRC

#+BEGIN_SRC bash :results table :tangle no
(cd ${DIR}; parallel "md5sum {}" ::: $(ls *.nc|head -n8))
#+END_SRC

#+RESULTS:
| 40d53f823e1a01e393fca2565eff5c1d | greenland_iv_250m_s1_s20141001_e20141031_v1_2.nc |
| ff0b16030be15cff201e5a540ef52848 | greenland_iv_250m_s1_s20141101_e20141130_v1_2.nc |
| 385e0a91654d3db8519ceb615b636436 | greenland_iv_250m_s1_s20150401_e20150430_v1_2.nc |
| e2af090c797fcc4bba8d62cf1933f49c | greenland_iv_250m_s1_s20141201_e20141231_v1_2.nc |
| 420a6f7617e2faefbb24f8afb3d456af | greenland_iv_250m_s1_s20150301_e20150331_v1_2.nc |
| 404ab716763f17524d318614b33bef2b | greenland_iv_250m_s1_s20150501_e20150531_v1_2.nc |
| 2bf634332b30fb6400cb3609fdd8972d | greenland_iv_250m_s1_s20150101_e20150131_v1_2.nc |
| d54cb3333feb08bfaac216f20371ae89 | greenland_iv_250m_s1_s20150201_e20150228_v1_2.nc |

**** Import data
+ Read in all the data
+ Convert from [m day-1] to [m year-1]
#+BEGIN_SRC bash :results verbatim
MSG_OK "ENVEO"
g.mapset -c ENVEO
ROOT=${DATADIR}/ENVEO/monthly

find ${ROOT} -name "*.nc"
# FILE=$(find ${ROOT} -name "*.nc"|head -n1) # testing

FILE=$(find ${ROOT} -name "greenland*.nc" | head -n1) # DEBUG
for FILE in $(find ${ROOT} -name "greenland*.nc" | LC_ALL=C sort); do
  T=$(echo ${FILE}|grep -o _s........_| tr -dc [0-9])
  DATE_STR=${T:0:4}_${T:4:2}_${T:6:2}
  echo $DATE_STR

  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity" output=vx_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity" output=vy_${DATE_STR}

  r.external -o source="NetCDF:${FILE}:land_ice_surface_velocity_stddev" output=err_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_stddev" output=ex_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_stddev" output=ey_${DATE_STR}
  r.mapcalc "err_${DATE_STR} = (ex_${DATE_STR}^2 + ey_${DATE_STR}^2)^0.5"
done

FILE=$(find ${ROOT} -name "*CCI*.nc" | head -n1) # DEBUG
for FILE in $(find ${ROOT} -name "*CCI*.nc" | LC_ALL=C sort); do
  T=$(basename "${FILE}" | grep -o '^[0-9]\{8\}')

  DATE_STR=${T:0:4}_${T:4:2}_${T:6:2}
  echo $DATE_STR

  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity" output=vx_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity" output=vy_${DATE_STR}

  r.external -o source="NetCDF:${FILE}:land_ice_surface_velocity_stddev" output=err_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_stddev" output=ex_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_stddev" output=ey_${DATE_STR}
  r.mapcalc "err_${DATE_STR} = (ex_${DATE_STR}^2 + ey_${DATE_STR}^2)^0.5"
done
#+END_SRC
#+RESULTS:

**** Find baseline
#+BEGIN_SRC bash :results verbatim
r.series input=$(g.list type=raster pattern=vx_2018_* separator=",") output=vx_baseline method=average --o
r.series input=$(g.list type=raster pattern=vy_2018_* separator=",") output=vy_baseline method=average --o
r.mapcalc "vel_baseline = 365 * sqrt(vx_baseline^2 + vy_baseline^2) * mask_ice@BedMachine" --o

r.series input=$(g.list type=raster pattern=err_2018_* separator=",") output=err_baseline method=average --o
r.mapcalc "vel_err_baseline = 365 * err_baseline * mask_ice@BedMachine" --o
#+END_SRC
#+RESULTS:

***** Fill in holes
+ There are holes in the velocity data which will create false gates. Fill them in.
+ Clump based on yes/no velocity
  + Largest clump is GIS
  + 2nd largest is ocean
+ Mask by ocean (so velocity w/ holes remains)
+ Fill holes
#+BEGIN_SRC bash :results verbatim
r.mask -r
r.mapcalc "no_vel = if(isnull(vel_baseline), 1, null())"
r.mask no_vel
r.clump input=no_vel output=no_vel_clump --o
ocean_clump=$(r.stats -c -n no_vel_clump sort=desc | head -n1 | cut -d" " -f1)
r.mask -i raster=no_vel_clump maskcats=${ocean_clump} --o
r.fillnulls input=vel_baseline out=vel_baseline_filled method=bilinear
r.mask -r
g.rename raster=vel_baseline_filled,vel_baseline --o
r.colors map=vel_baseline -e color=viridis
#+END_SRC
#+RESULTS:
****** Display
#+BEGIN_SRC bash :results verbatim :tangle no
d.mon start=wx0
d.erase
d.rast vel
d.rast vel_filled
#+END_SRC
#+RESULTS:

*** COMMENT Sentinel IV
**** Data Intro
:PROPERTIES:
:header-args:bash+: :session Sentinel_provenance
:END:

#+BEGIN_SRC bash :results verbatim :tangle no
DIR=${DATADIR}/Sentinel1/Sentinel1_IV_maps
(cd ${DIR}; nth *.nc)
#+END_SRC

#+RESULTS:
#+begin_example

-rw------- 1 kdm  96M Nov 16  2017 IV_20160913_20161006.nc
-rw------- 1 kdm  97M Nov 16  2017 IV_20160925_20161018.nc
-rw------- 1 kdm  88M Nov 16  2017 IV_20161007_20161030.nc
-rw------- 1 kdm  88M Nov 16  2017 IV_20161013_20161105.nc
-rw------- 1 kdm  71M Nov 16  2017 IV_20161019_20161111.nc
-rw------- 1 kdm  83M Nov 16  2017 IV_20161031_20161123.nc
-rw------- 1 kdm  80M Nov 16  2017 IV_20161106_20161129.nc
-rw------- 1 kdm  87K Nov 16  2017 IV_20161118_20161211.nc
-rw------- 1 kdm  87K Nov 16  2017 IV_20161124_20161217.nc
-rw------- 1 kdm 100M Nov 16  2017 IV_20161130_20161223.nc
-rw------- 1 kdm  99M Nov 16  2017 IV_20161206_20161229.nc
-rw------- 1 kdm 101M Nov 16  2017 IV_20161212_20170104.nc
-rw------- 1 kdm 126M Nov 16  2017 IV_20161218_20170110.nc
-rw------- 1 kdm 133M Nov 16  2017 IV_20161224_20170116.nc
-rw------- 1 kdm 140M Nov 16  2017 IV_20161230_20170122.nc
-rw------- 1 kdm 141M Nov 16  2017 IV_20170105_20170128.nc
-rw------- 1 kdm 118M Nov 16  2017 IV_20170111_20170203.nc
-rw------- 1 kdm 112M Nov 16  2017 IV_20170117_20170209.nc
-rw------- 1 kdm 124M Nov 16  2017 IV_20170123_20170215.nc
-rw------- 1 kdm 123M Nov 16  2017 IV_20170129_20170221.nc
-rw------- 1 kdm 125M Nov 16  2017 IV_20170204_20170227.nc
-rw------- 1 kdm 125M Nov 16  2017 IV_20170210_20170305.nc
-rw------- 1 kdm 104M Nov 16  2017 IV_20170216_20170311.nc
-rw------- 1 kdm 105M Nov 16  2017 IV_20170222_20170317.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170228_20170323.nc
-rw------- 1 kdm 104M Nov 16  2017 IV_20170306_20170329.nc
-rw------- 1 kdm 105M Nov 16  2017 IV_20170312_20170404.nc
-rw------- 1 kdm 105M Nov 16  2017 IV_20170318_20170410.nc
-rw------- 1 kdm 109M Nov 16  2017 IV_20170324_20170416.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170330_20170422.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170405_20170428.nc
-rw------- 1 kdm  99M Nov 16  2017 IV_20170411_20170504.nc
-rw------- 1 kdm  99M Nov 16  2017 IV_20170417_20170510.nc
-rw------- 1 kdm  96M Nov 16  2017 IV_20170423_20170516.nc
-rw------- 1 kdm 101M Nov 16  2017 IV_20170429_20170522.nc
-rw------- 1 kdm 104M Nov 16  2017 IV_20170505_20170528.nc
-rw------- 1 kdm 107M Nov 16  2017 IV_20170511_20170603.nc
-rw------- 1 kdm 108M Nov 16  2017 IV_20170517_20170609.nc
-rw------- 1 kdm 108M Nov 16  2017 IV_20170523_20170615.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170529_20170621.nc
-rw------- 1 kdm 105M Nov 16  2017 IV_20170604_20170627.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170610_20170703.nc
-rw------- 1 kdm 103M Nov 16  2017 IV_20170616_20170709.nc
-rw------- 1 kdm 101M Nov 16  2017 IV_20170622_20170715.nc
-rw------- 1 kdm 100M Nov 16  2017 IV_20170628_20170721.nc
-rw------- 1 kdm 102M Nov 16  2017 IV_20170704_20170727.nc
-rw------- 1 kdm 100M Nov 16  2017 IV_20170710_20170802.nc
-rw------- 1 kdm  99M Nov 16  2017 IV_20170716_20170808.nc
-rw------- 1 kdm 102M Nov 16  2017 IV_20170722_20170814.nc
-rw------- 1 kdm 106M Nov 16  2017 IV_20170728_20170820.nc
-rw-r--r-- 1 kdm 100M Nov 16  2017 IV_20170803_20170826.nc
-rw-r--r-- 1 kdm 102M Jan 12  2018 IV_20170809_20170901.nc
-rw-r--r-- 1 kdm 102M Jan 12  2018 IV_20170815_20170907.nc
-rw-r--r-- 1 kdm 100M Jan 12  2018 IV_20170821_20170913.nc
-rw-r--r-- 1 kdm  99M Jan 12  2018 IV_20170902_20170925.nc
-rw-r--r-- 1 kdm  99M Jan 12  2018 IV_20170908_20171001.nc
-rw-r--r-- 1 kdm  90M Jan 12  2018 IV_20170914_20171007.nc
-rw-r--r-- 1 kdm 107M Apr  6  2018 IV_20170920_20171013.nc
-rw-r--r-- 1 kdm 109M Apr  6  2018 IV_20170926_20171019.nc
-rw-r--r-- 1 kdm 108M Apr  6  2018 IV_20171002_20171025.nc
-rw-r--r-- 1 kdm 107M Apr 11  2018 IV_20171008_20171031.nc
-rw-r--r-- 1 kdm  97M Apr 11  2018 IV_20171014_20171106.nc
-rw-r--r-- 1 kdm  95M Apr 11  2018 IV_20171020_20171112.nc
-rw-r--r-- 1 kdm 102M Apr 11  2018 IV_20171026_20171118.nc
-rw-r--r-- 1 kdm 104M Apr 11  2018 IV_20171101_20171124.nc
-rw-r--r-- 1 kdm 107M Apr  6  2018 IV_20171106_20171130.nc
-rw-rw-r-- 1 kdm 104M Apr  6  2018 IV_20171118_20171212.nc
-rw-r--r-- 1 kdm 106M Apr  9  2018 IV_20171130_20171224.nc
-rw-r--r-- 1 kdm 113M Apr  9  2018 IV_20171212_20180105.nc
-rw-r--r-- 1 kdm 146M Apr  9  2018 IV_20171224_20180117.nc
-rw-rw-r-- 1 kdm 142M Apr 11  2018 IV_20180105_20180129.nc
-rw-rw-r-- 1 kdm 150M Apr 30  2018 IV_20180117_20180210.nc
-rw-rw-r-- 1 kdm 123M Apr 30  2018 IV_20180129_20180222.nc
-rw-rw-r-- 1 kdm 121M May  3  2018 IV_20180210_20180306.nc
-rw-rw-r-- 1 kdm 132M Aug 24  2018 IV_20180222_20180318.nc
-rw-rw-r-- 1 kdm 125M Aug 24  2018 IV_20180306_20180330.nc
-rw-rw-r-- 1 kdm 120M Aug 24  2018 IV_20180318_20180411.nc
-rw-rw-r-- 1 kdm  87M Aug 24  2018 IV_20180330_20180423.nc
-rw-rw-r-- 1 kdm  69M Aug 24  2018 IV_20180411_20180505.nc
-rw-rw-r-- 1 kdm  88M Aug 24  2018 IV_20180423_20180517.nc
-rw-rw-r-- 1 kdm 103M Aug 28  2018 IV_20180505_20180529.nc
-rw-rw-r-- 1 kdm 100M Sep  3  2018 IV_20180517_20180610.nc
-rw-rw-r-- 1 kdm 108M Nov 22  2018 IV_20180529_20180622.nc
-rw-rw-r-- 1 kdm 108M Nov 22  2018 IV_20180610_20180704.nc
-rw-rw-r-- 1 kdm 101M Nov 22  2018 IV_20180622_20180716.nc
-rw-rw-r-- 1 kdm  85M Nov 22  2018 IV_20180704_20180728.nc
-rw-rw-r-- 1 kdm  90M Nov 23  2018 IV_20180716_20180809.nc
-rw-rw-r-- 1 kdm  99M Nov 23  2018 IV_20180728_20180821.nc
-rw-rw-r-- 1 kdm 106M Nov 23  2018 IV_20180809_20180902.nc
-rw-rw-r-- 1 kdm 100M Nov 23  2018 IV_20180821_20180914.nc
-rw-rw-r-- 1 kdm 110M Nov 23  2018 IV_20180902_20180926.nc
-rw-rw-r-- 1 kdm  89M Nov 23  2018 IV_20180914_20181008.nc
-rw-rw-r-- 1 kdm 106M Feb  8  2019 IV_20180926_20181020.nc
-rw-rw-r-- 1 kdm 109M Feb  8  2019 IV_20181008_20181101.nc
-rw-rw-r-- 1 kdm 110M Feb  8  2019 IV_20181020_20181113.nc
-rw-rw-r-- 1 kdm 111M Feb  8  2019 IV_20181101_20181125.nc
-rw-rw-r-- 1 kdm 110M Feb  8  2019 IV_20181113_20181207.nc
-rw-rw-r-- 1 kdm 109M Feb  8  2019 IV_20181126_20181219.nc
-rw-rw-r-- 1 kdm 130M Feb  8  2019 IV_20181207_20181231.nc
-rw-rw-r-- 1 kdm 142M Apr  5  2019 IV_20181219_20190112.nc
-rw-rw-r-- 1 kdm 143M Apr  5  2019 IV_20181231_20190124.nc
-rw-rw-r-- 1 kdm 148M Apr  5  2019 IV_20190112_20190205.nc
-rw-rw-r-- 1 kdm 116M Apr  5  2019 IV_20190124_20190217.nc
-rw-rw-r-- 1 kdm 133M Apr  8  2019 IV_20190205_20190301.nc
-rw-rw-r-- 1 kdm 126M Apr  8  2019 IV_20190217_20190313.nc
-rw-rw-r-- 1 kdm 113M Apr 11  2019 IV_20190301_20190325.nc
-rw-rw-r-- 1 kdm 110M Apr 23  2019 IV_20190313_20190406.nc
-rw-rw-r-- 1 kdm 127M Apr 30  2019 IV_20190325_20190417.nc
-rw-rw-r-- 1 kdm 134M May  6  2019 IV_20190406_20190430.nc
-rw-rw-r-- 1 kdm 146M May 23  2019 IV_20190418_20190512.nc
-rw-rw-r-- 1 kdm 134M Jun  3  2019 IV_20190430_20190524.nc
-rw-rw-r-- 1 kdm 120M Jun 12  2019 IV_20190512_20190605.nc
-rw-rw-r-- 1 kdm 120M Jun 25  2019 IV_20190524_20190617.nc
-rw-rw-r-- 1 kdm  98M Jul 10  2019 IV_20190605_20190629.nc
-rw-rw-r-- 1 kdm 109M Aug 13  2019 IV_20190617_20190711.nc
-rw-rw-r-- 1 kdm 112M Aug 13  2019 IV_20190629_20190723.nc
-rw-rw-r-- 1 kdm 101M Aug 21  2019 IV_20190711_20190804.nc
-rw-rw-r-- 1 kdm 108M Aug 29  2019 IV_20190723_20190816.nc
-rw-rw-r-- 1 kdm 127M Sep  4 09:46 IV_20190804_20190828.nc
-rw-r--r-- 1 kdm 129M Sep 17 07:59 IV_20190816_20190909.nc
-rw-r--r-- 1 kdm 129M Sep 30 10:46 IV_20190828_20190921.nc
-rw-rw-r-- 1 kdm 116M Oct 11 06:30 IV_20190909_20191003.nc
-rw-rw-r-- 1 kdm 116M Nov  1 07:07 IV_20190921_20191015.nc
-rw-rw-r-- 1 kdm 129M Nov 11 11:53 IV_20191003_20191027.nc
-rw-rw-r-- 1 kdm 125M Nov 18 04:35 IV_20191015_20191108.nc
-rw-rw-r-- 1 kdm 129M Nov 26 11:40 IV_20191027_20191120.nc
-rw-rw-r-- 1 kdm 156M Dec 11 04:01 IV_20191108_20191202.nc
-rw-rw-r-- 1 kdm 159M Dec 20 07:30 IV_20191120_20191214.nc
-rw-rw-r-- 1 kdm 179M Jan  2 20:02 IV_20191202_20191226.nc
-rw-rw-r-- 1 kdm 188M Jan 22 05:30 IV_20191214_20200107.nc
-rw-rw-r-- 1 kdm 187M Jan 31 22:52 IV_20191226_20200119.nc
-rw-rw-r-- 1 kdm 187M Feb 17 14:03 IV_20200107_20200131.nc
-rw-rw-r-- 1 kdm 177M Feb 20 12:46 IV_20200119_20200212.nc
#+end_example
 
#+BEGIN_SRC bash :results verbatim :tangle no
(cd ${DIR}; ncdump -h $(ls *.nc | head -n1))
#+END_SRC
#+RESULTS:
#+begin_example
netcdf greenland_iv_250m_s1_s20141001_e20141031_v1_2 {
dimensions:
	y = 10801 ;
	x = 5984 ;
variables:
	int crs ;
		crs:grid_mapping_name = "polar_stereographic" ;
		crs:standard_parallel = 70. ;
		crs:straight_vertical_longitude_from_pole = -45. ;
		crs:false_easting = 0. ;
		crs:false_northing = 0. ;
		crs:unit = "metre" ;
		crs:spatial_ref = "PROJCS[\"WGS 84 / NSIDC Sea Ice Polar Stereographic North\",\n    GEOGCS[\"WGS 84\",\n        DATUM[\"WGS_1984\",\n            SPHEROID[\"WGS 84\",6378137,298.257223563,\n                AUTHORITY[\"EPSG\",\"7030\"]],\n            AUTHORITY[\"EPSG\",\"6326\"]],\n        PRIMEM[\"Greenwich\",0,\n            AUTHORITY[\"EPSG\",\"8901\"]],\n        UNIT[\"degree\",0.0174532925199433,\n            AUTHORITY[\"EPSG\",\"9122\"]],\n        AUTHORITY[\"EPSG\",\"4326\"]],\n    PROJECTION[\"Polar_Stereographic\"],\n    PARAMETER[\"latitude_of_origin\",70],\n    PARAMETER[\"central_meridian\",-45],\n    PARAMETER[\"scale_factor\",1],\n    PARAMETER[\"false_easting\",0],\n    PARAMETER[\"false_northing\",0],\n    UNIT[\"metre\",1,\n        AUTHORITY[\"EPSG\",\"9001\"]],\n    AXIS[\"X\",EAST],\n    AXIS[\"Y\",NORTH],\n    AUTHORITY[\"EPSG\",\"3413\"]]" ;
		crs:latitude_of_projection_origin = 90. ;
	double y(y) ;
		y:units = "m" ;
		y:axis = "Y" ;
		y:long_name = "y coordinate of projection" ;
		y:standard_name = "projection_y_coordinate" ;
	double x(x) ;
		x:units = "m" ;
		x:axis = "X" ;
		x:long_name = "x coordinate of projection" ;
		x:standard_name = "projection_x_coordinate" ;
	float land_ice_surface_easting_velocity(y, x) ;
		land_ice_surface_easting_velocity:_FillValue = 3.402823e+38f ;
		land_ice_surface_easting_velocity:units = "m/day" ;
		land_ice_surface_easting_velocity:description = "easting ice velocity" ;
		land_ice_surface_easting_velocity:grid_mapping = "crs" ;
		land_ice_surface_easting_velocity:coordinates = "y x" ;
	float land_ice_surface_northing_velocity(y, x) ;
		land_ice_surface_northing_velocity:_FillValue = 3.402823e+38f ;
		land_ice_surface_northing_velocity:units = "m/day" ;
		land_ice_surface_northing_velocity:description = "northing ice velocity" ;
		land_ice_surface_northing_velocity:grid_mapping = "crs" ;
		land_ice_surface_northing_velocity:coordinates = "y x" ;
	float land_ice_surface_vertical_velocity(y, x) ;
		land_ice_surface_vertical_velocity:_FillValue = 3.402823e+38f ;
		land_ice_surface_vertical_velocity:units = "m/day" ;
		land_ice_surface_vertical_velocity:description = "vertical ice velocity" ;
		land_ice_surface_vertical_velocity:grid_mapping = "crs" ;
		land_ice_surface_vertical_velocity:coordinates = "y x" ;
	float land_ice_surface_velocity_magnitude(y, x) ;
		land_ice_surface_velocity_magnitude:_FillValue = 3.402823e+38f ;
		land_ice_surface_velocity_magnitude:units = "m/day" ;
		land_ice_surface_velocity_magnitude:description = "magnitude of horizontal ice velocity" ;
		land_ice_surface_velocity_magnitude:grid_mapping = "crs" ;
		land_ice_surface_velocity_magnitude:coordinates = "y x" ;
	int land_ice_surface_measurement_count(y, x) ;
		land_ice_surface_measurement_count:_FillValue = -1 ;
		land_ice_surface_measurement_count:units = "m/day" ;
		land_ice_surface_measurement_count:description = "count of measurements" ;
		land_ice_surface_measurement_count:grid_mapping = "crs" ;
		land_ice_surface_measurement_count:coordinates = "y x" ;
	float land_ice_surface_velocity_stddev(y, x) ;
		land_ice_surface_velocity_stddev:_FillValue = 3.402823e+38f ;
		land_ice_surface_velocity_stddev:units = "m/day" ;
		land_ice_surface_velocity_stddev:description = "standard deviation of ice velocity" ;
		land_ice_surface_velocity_stddev:grid_mapping = "crs" ;
		land_ice_surface_velocity_stddev:coordinates = "y x" ;

// global attributes:
		:comment = "Ice velocity map of Greenland derived from Sentinel-1 SAR data acquired from 2014-10-01 to 2014-10-31. The surface velocity is derived applying feature tracking techniques. The ice velocity map is provided at 250m grid spacing in North Polar Stereographic projection (EPSG: 3413). The horizontal velocity is provided in true meters per day, towards EASTING(vx) and NORTHING(vy) direction of the grid, and the vertical displacement (vz), is derived from a digital elevation model. Provided is a NetCDF file with the velocity components: vx, vy, vz and vv (magnitude of the horizontal components), along with maps showing valid pixel count and uncertainty (std.). The product was generated by Sentinel." ;
		:contact = "http://www.enveo.at/" ;
		:Conventions = "CF-1.7" ;
		:creation_date = "2020-02-04" ;
		:history = "Initial product version 1.2" ;
		:institution = "Sentinel" ;
		:keywords = "EARTH SCIENCE CLIMATE INDICATORS CRYOSPHERIC INDICATORS GLACIAL MEASUREMENTS ICE SHEET VELOCITY CRYOSPHERE GLACIERS/ICE SHEETS" ;
		:license = "general license" ;
		:project = "ESA Greenland Ice Sheet CCI+" ;
		:reference = "Main: Nagler, T.; Rott, H.; Hetzenecker, M.; Wuite, J.; Potin, P. The Sentinel-1 Mission: New Opportunities for Ice Sheet Observations. Remote Sens. 2015, 7, 9371-9389." ;
		:source = "Copernicus Sentinel-1A and Sentinel-1B" ;
		:summary = "Ice velocity derived for Greenland Ice Sheet gridded at sm averaged from 2014-10-01 to 2014-10-31." ;
		:title = "Ice Velocity of the Greenland Ice Sheet" ;
}
#+end_example

#+BEGIN_SRC bash :results table :tangle no
(cd ${DIR}; parallel "md5sum {}" ::: $(ls *.nc|head -n8))
#+END_SRC

#+RESULTS:
| ff0b16030be15cff201e5a540ef52848 | greenland_iv_250m_s1_s20141101_e20141130_v1_2.nc |
| e2af090c797fcc4bba8d62cf1933f49c | greenland_iv_250m_s1_s20141201_e20141231_v1_2.nc |
| 40d53f823e1a01e393fca2565eff5c1d | greenland_iv_250m_s1_s20141001_e20141031_v1_2.nc |
| 385e0a91654d3db8519ceb615b636436 | greenland_iv_250m_s1_s20150401_e20150430_v1_2.nc |
| 420a6f7617e2faefbb24f8afb3d456af | greenland_iv_250m_s1_s20150301_e20150331_v1_2.nc |
| 404ab716763f17524d318614b33bef2b | greenland_iv_250m_s1_s20150501_e20150531_v1_2.nc |
| 2bf634332b30fb6400cb3609fdd8972d | greenland_iv_250m_s1_s20150101_e20150131_v1_2.nc |
| d54cb3333feb08bfaac216f20371ae89 | greenland_iv_250m_s1_s20150201_e20150228_v1_2.nc |

**** Import data
+ Read in all the data
+ Convert from [m day-1] to [m year-1]
#+BEGIN_SRC bash :results verbatim
MSG_OK "Sentinel 1"
g.mapset -c Sentinel1
ROOT=${DATADIR}/Sentinel1/Sentinel1_IV_maps

find ${ROOT} -name "*.nc"
# FILE=$(find ${ROOT} -name "*.nc"|head -n1) # testing

FILE=$(find ${ROOT} -name "*.nc" | head -n1) # DEBUG
for FILE in $(find ${ROOT} -name "*.nc"); do
  T=$(ncdump -v time $FILE | tail -n2 | tr -dc '[0-9]')
  DATE=$(date --date="1990-01-01 +${T} days" --iso-8601)
  DATE_STR=$(echo ${DATE} | sed s/-/_/g)
  echo $DATE

  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity" output=vx_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity" output=vy_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_easting_velocity_std" output=ex_${DATE_STR}
  r.external -o source="NetCDF:${FILE}:land_ice_surface_northing_velocity_std" output=ey_${DATE_STR}
done
#+END_SRC
#+RESULTS:


*** Glacier Names
+ From [[textcite:Bjork:2015Brief][Bjørk /et al./ (2015)]].
+ Also use citet:mouginot_2019_glacier
**** Bjørk 2015
+ Write out x,y,name. Can use x,y and mean gate location to find closest name for each gate.
#+BEGIN_SRC bash :results verbatim
MSG_OK "Bjørk 2015"
g.mapset -c Bjork_2015

ROOT=${DATADIR}/Bjork_2015/

cat ${ROOT}/GreenlandGlacierNames_GGNv01.csv |  iconv -c -f utf-8 -t ascii | grep GrIS | awk -F';' '{print $3"|"$2"|"$7}' | sed s/,/./g | m.proj -i input=- | sed s/0.00\ //g | v.in.ascii input=- output=names columns="x double precision, y double precision, name varchar(99)"

# db.select table=names | tr '|' ',' > ./tmp/Bjork_2015_names.csv
#+END_SRC
#+RESULTS:
**** Mouginot 2019
#+BEGIN_SRC bash :results verbatim
g.mapset Mouginot_2019
db.select table=sectors | head
# v.out.ascii -c input=sectors output=./tmp/Mouginot_2019_names.csv columns=NAME,SUBREGION1
#+END_SRC
#+RESULTS:


*** Elevation



+ h_0 is PRODEM 20 set to day 182 of 2020
+ h_n+ is PRODEM following years
  + When PRODEM ends, continue using last year (e.g., =pandas= =ffill()=)
+ h_n- is Khan 2016e [[file:${DATADIR}/Khan_2016/README.org]]
  + Coverage is 1995 through 2020
  + Prior to Khan beginning, use first year (e.g., =pandas= =bfill()=)
    
**** PRODEM

#+BEGIN_SRC bash :exports both :results verbatim
MSG_OK "dh/dt"

g.mapset -c PRODEM
r.mask -r

f=$(ls ${DATADIR}/PRODEM/PRODEM??.tif | head -n1) # debug
for f in $(ls ${DATADIR}/PRODEM/PRODEM??.tif); do
  y=20$(echo ${f: -6:2})
  r.in.gdal -r input=${f} output=DEM_${y} band=1
  # r.in.gdal -r input=${f} output=var_${y} band=2
  # r.in.gdal -r input=${f} output=dh_${y} band=3
  # r.in.gdal -r input=${f} output=time_${y} band=4
  # r.univar -g time_2019 # mean = DOI 213 = 01 Aug
done
g.region raster=DEM_2019 -pa
#+END_SRC


**** SEC

Using CCI SEC data from citet:simonsen_2017_implications,sørensen_2015_envisat,khvorostovsky_2012_merging,CCI_SEC.

+ This NetCDF file is malformed and needs some dimensions swapped before GDAL can read it.
+ Thanks: https://stackoverflow.com/questions/47642695/how-can-i-swap-the-dimensions-of-a-netcdf-file

#+BEGIN_SRC bash :results verbatim
g.mapset -c SEC

ls ${DATADIR}/SEC/Release/CCI_GrIS_RA_SEC_5km_Vers3.0_2024-05-31.nc
INFILE=${DATADIR}/SEC/Release/CCI_GrIS_RA_SEC_5km_Vers3.0_2024-05-31.nc
ncdump -chs ${INFILE}
ncdump -v x ${INFILE}
ncdump -v y ${INFILE}

g.region w=-739301.625 e=880698.375 s=-3478140.75 n=-413140.75 res=5000 -p
g.region w=w-2500 e=e+2500 n=n+2500 s=s-2500 -pa

ncap2 --overwrite -s 'SEC2=SEC.permute($t,$y,$x)' ${INFILE} ./tmp/SEC.nc
INFILE=./tmp/SEC.nc

# ncdump -p 9,5 ./tmp/SEC.nc |less
for i in $(seq 28); do
  d0=$(( ${i}+1991 ))-01-01
  d1=$(( ${i}+1996 ))-01-01
  n0=$(echo $d0 | sed s/-//g)
  n1=$(echo $d1 | sed s/-//g)
  OUTFILE=SEC_${n0}_${n1}
  echo $OUTFILE
  r.external -o source=NetCDF:${INFILE}:SEC2 band=${i} output=${OUTFILE}
  r.region -c map=${OUTFILE}
done
#+END_SRC
#+RESULTS:

***** Define annual values
#+BEGIN_SRC bash :results verbatim
r.mapcalc "dh_2014 = SEC_20120101_20170101"
r.mapcalc "dh_2015 = SEC_20130101_20180101"
r.mapcalc "dh_2016 = SEC_20140101_20190101"
r.mapcalc "dh_2017 = SEC_20150101_20200101"
r.mapcalc "dh_2018 = SEC_20160101_20210101"
r.mapcalc "dh_2019 = SEC_20170101_20220101"


seq 2014 2019 | parallel --bar --progress "r.null map=dh_{} null=0" --quiet
#+END_SRC
**** DEM

+ Merge Khan dh/dt w/ PRODEM to generate annual DEMs

#+BEGIN_SRC bash :exports both :results verbatim
MSG_OK "DEM"
g.mapset -c DEM

g.region raster=DEM_2020@PRODEM -pa

for y in {2019..2023}; do
  r.mapcalc "DEM_${y} = DEM_${y}@PRODEM"
done

for y in {2019..2014}; do
  y1=$(( ${y} + 1 ))
  r.mapcalc "DEM_${y} = DEM_${y1} - dh_${y}@SEC"
done
#+END_SRC




**** COMMENT Coverage Percent?
#+BEGIN_SRC bash :results verbatim

r.univar -r mask_ice@BedMachine # 44351066 cells
g.region -up raster=mask_ice@BedMachine # res = 200
frink "44351066 * (200 m) * (200 m) -> \"km^2\"" # 1.774 million km^2

g.region -up # res = 5000
r.univar -r SEC_20150101_20170101 # 64062 non-null cells
frink "64062 * (5000 m) * (5000 m) -> \"km^2\"" # 1.601 million km^2
frink "1.601/1.774*100" # 10 % missing

r.univar -r SEC_19970101_20020101 # 60600
frink "60600 * (5000 m) * (5000 m) -> \"km^2\"" # 1.515 million km^2
frink "1.515/1.774*100" # 15 % missing
#+END_SRC
#+RESULTS:

** Find Gates
:PROPERTIES:
:header-args:bash+: :tangle gate_IO.sh
:END:

*** Algorithm
+ [X] Find all fast-moving ice (>X m yr^{-1})
  + Results not very sensitive to velocity limit (10 to 100 m yr^{-1} examined)
+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask
+ [X] Move grounding line cells inland by X km, again limiting to regions of fast ice.
  + Results not very sensitive to gate position (1 - 5 km range examined)

+ [X] Discard gates if group size \in [1,2]
+ [X] Manually clean a few areas (e.g. land-terminating glaciers, gates due to invalid masks, etc.) by manually selecting invalid regions in Google Earth, then remove gates in these regions

Note that "fast ice" refers to flow velocity, not the sea ice term of "stuck to the land".

INSTRUCTIONS: Set VELOCITY_CUTOFF and BUFFER_DIST to 50 and 2500 respectively and run the code. Then repeat for a range of other velocity cutoffs and buffer distances to get a range of sensitivities.

OR: Tangle via ((org-babel-tangle) the code below (C-c C-v C-t or ) to [[./gate_IO.sh]] and then run this in a GRASS session:1

#+BEGIN_SRC bash :results verbatim :tangle gate_IO_runner.sh
<<MSGS_pretty_print>>
<<GRASS_config>>

# 1000: clean results, but too few
# 500: clean results, still too few
# 250: looks good, but 15 Gt < Mankoff 2019. Maybe missing some outlets?
# 150:
VELOCITY_CUTOFF=150
BUFFER_DIST=10000
. ./gate_IO.sh
#+END_SRC
#+RESULTS:

Create a new mapset for this specific velocity cutoff and buffer distance

#+BEGIN_SRC bash :results verbatim
g.mapset -c gates_${VELOCITY_CUTOFF}_${BUFFER_DIST}
g.region -d
#+END_SRC

From above:

+ [X] Find grounding line by finding edge cells where fast-moving ice borders water or ice shelf based (loosely) on BedMachine mask

The "loosely" is because the BedMachine mask doesn't always reach into each fjord all the way. I buffer the BedMachine mask by 2 km here so that it extends to the edge of the velocity data.

#+BEGIN_SRC bash :results verbatim
g.copy raster=mask_ice@BedMachine,mask_ice --o
# Grow by 2 km (10 cells @ 200 m/cell)
r.grow input=mask_ice output=mask_ice_grow radius=10 new=1 --o
r.mask mask_ice_grow
#+END_SRC

The fast ice edge is where there is fast-flowing ice overlapping with not-ice.

#+BEGIN_SRC bash :results verbatim
r.mapcalc "fast_ice = if(vel_baseline@ENVEO > ${VELOCITY_CUTOFF}, 1, null())" --o
r.mapcalc "fast_ice_100 = if(vel_baseline@ENVEO > 100, 1, null())" --o
r.mask -r

# no velocity data, or is flagged as ice shelf or land in BedMachine
r.mapcalc "not_ice = if(isnull(vel_baseline@ENVEO) ||| (mask@BedMachine == 0) ||| (mask@BedMachine == 3), 1, null())" --o

r.grow input=not_ice output=not_ice_grow radius=1.5 new=99 --o
r.mapcalc "fast_ice_edge = if(((not_ice_grow == 99) && (fast_ice == 1)), 1, null())" --o
#+END_SRC

The gates are set ${BUFFER_DIST} inland from the fast ice edge. This is done by buffering the fast ice edge (which fills the space between the fast ice edge and buffer extent) and then growing the buffer by 1. This last step defines the gate locations.

However, in order to properly estimate discharge, the gate location is not enough. Ice must flow from outside the gates, through the gates, to inside the gates, and not flow from one gate pixel to another gate pixel (or it would be counted 2x). 

#+BEGIN_SRC bash :results verbatim
r.buffer input=fast_ice_edge output=fast_ice_buffer distances=${BUFFER_DIST} --o
r.grow input=fast_ice_buffer output=fast_ice_buffer_grow radius=1.5 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_inside = if(((fast_ice_buffer_grow == 99) && (fast_ice_100 == 1)), 1, null())" --o
r.mask -r

r.grow input=gates_inside output=gates_inside_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_maybe = if(((gates_inside_grow == 99) && (fast_ice_100 == 1) && isnull(fast_ice_buffer)), 1, null())" --o
r.mask -r

r.grow input=gates_maybe output=gates_maybe_grow radius=1.1 new=99 --o
r.mask -i not_ice --o
r.mapcalc "gates_outside = if(((gates_maybe_grow == 99) && (fast_ice_100 == 1) && isnull(fast_ice_buffer) && isnull(gates_inside)), 1, null())" --o
r.mask -r

r.mapcalc "gates_IO = 0" --o
r.mapcalc "gates_IO = if(isnull(gates_inside), gates_IO, 1)" --o
r.mapcalc "gates_IO = if(isnull(gates_outside), gates_IO, -1)" --o

r.colors map=gates_inside color=red
r.colors map=gates_maybe color=grey
r.colors map=gates_outside color=blue
r.colors map=gates_IO color=viridis
#+END_SRC
#+RESULTS:

+ For each gate, split into two for the vector components of the velocity, then...
+ If flow is from gate to INSIDE, it is discharged
+ If flow is from gate to GATE, it is ignored
+ If flow is from gate to NOT(GATE || INSIDE) it is ignored
  + If gates are a closed loop, such as the 1700 m flight-line, then
    this scenario would be NEGATIVE discharge, not ignored. This was
    tested with the 1700 m flight-line and compared against both the
    vector calculations and WIC estimates.

#+NAME: tbl_velocity
| var            | value  | meaning           |
|----------------+--------+-------------------|
| vx             | > 0    | east / right      |
| vx             | < 0    | west / left       |
| vy             | > 0    | north / up        |
| vy             | < 0    | south / down      |
|----------------+--------+-------------------|
| GRASS indexing | [0,1]  | cell to the right |
|                | [0,-1] | left              |
|                | [-1,0] | above             |
|                | [1,0]  | below             |

#+BEGIN_SRC bash :results verbatim
# g.mapset -c gates_50_2500

r.mask -r

r.mapcalc "gates_x = 0" --o
r.mapcalc "gates_x = if((gates_maybe == 1) && (vx_baseline@ENVEO > 0), gates_IO[0,1], gates_x)" --o
r.mapcalc "gates_x = if((gates_maybe != 0) && (vx_baseline@ENVEO < 0), gates_IO[0,-1], gates_x)" --o

r.mapcalc "gates_y = 0" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@ENVEO > 0), gates_IO[-1,0], gates_y)" --o
r.mapcalc "gates_y = if((gates_maybe != 0) && (vy_baseline@ENVEO < 0), gates_IO[1,0], gates_y)" --o

r.mapcalc "gates_x = if(gates_x == 1, 1, 0)" --o
r.mapcalc "gates_y = if(gates_y == 1, 1, 0)" --o

r.null map=gates_x null=0 # OR r.null map=gates_x setnull=0
r.null map=gates_y null=0 # OR r.null map=gates_y setnull=0
#+END_SRC
*** Clean Gates                                                    :noexport:
**** Subset to where there is known discharge
#+BEGIN_SRC bash :results verbatim
r.mapcalc "gates_xy_clean00 = if((gates_x == 1) || (gates_y == 1), 1, null())" --o
r.mapcalc "gates_xy_clean0 = if(gates_xy_clean00 & if(DEM_2019@DEM), 1, null())" --o
#+END_SRC
#+RESULTS:

**** Remove small areas (clusters <X cells)
#+BEGIN_SRC bash :results verbatim
# Remove clusters of 2 or less. How many hectares in X pixels?
# frink "(200 m)^2 * 2 -> hectares" # ans: 8.0

r.clump -d input=gates_xy_clean0 output=gates_gateID --o
r.reclass.area -d input=gates_gateID output=gates_area value=9 mode=lesser method=reclass --o

r.mapcalc "gates_xy_clean1 = if(isnull(gates_area), gates_xy_clean0, null())" --o
#+END_SRC
#+RESULTS:


**** Limit to Mouginot 2019 mask
+ Actually, limit to approximate Mouginot 2019 mask - its a bit narrow in some places
#+BEGIN_SRC bash :results verbatim
# r.mask mask_GIC@Mouginot_2019 --o
r.grow input=mask_GIC@Mouginot_2019 output=mask_GIC_Mouginot_2019_grow radius=4.5 # three cells
r.mask mask_GIC_Mouginot_2019_grow --o
r.mapcalc "gates_xy_clean2 = gates_xy_clean1" --o
r.mask -r

# r.univar map=gates_xy_clean1
# r.univar map=gates_xy_clean2
#+END_SRC

**** COMMENT Remove areas from manually-drawn KML mask
+ See [[./dat/remove_manual.kml]]
#+BEGIN_SRC bash :results verbatim
v.import input=./dat/remove_manual.kml output=remove_manual --o
r.mask -i vector=remove_manual --o
r.mapcalc "gates_xy_clean3 = gates_xy_clean2" --o
r.mask -r

r.univar map=gates_xy_clean2
r.univar map=gates_xy_clean3
#+END_SRC
#+RESULTS:

*** Final Gates
#+BEGIN_SRC bash :results verbatim
MSG_ERR "No manual removal -> No clean3 -> expecting ERROR"
g.copy "gates_xy_clean3,gates_final" --o
# MSG_WARN "Using clean2"
g.copy "gates_xy_clean2,gates_final" --o
#+end_src
#+RESULTS:

*** Add meta-data to gates
Add:
+ Gate ID
+ Calculate the average x,y of the gate, and then from that ONE point, determine the following. Do this from the average point rather than for each gate pixel because some gates span multiple sectors, or different ends of the gate are nearer different names, etc.
  + Average lon,lat of gate
  + Nearest citet:mouginot_2019_glacier region, sector, and name
  + Nearest citet:bjork_2015_brief name

Do this for both the area vector and the point vector so that we can export
+ KML and GeoPackage with gates and metadata
+ simple CSV w/ gates and metadata.

**** Gate ID
#+BEGIN_SRC bash :results verbatim

# db.droptable -f table=gates_final
# db.droptable -f table=gates_final_pts

# areas (clusters of gate pixels, but diagonals are separate)
r.to.vect input=gates_final output=gates_final type=area --o
v.db.dropcolumn map=gates_final column=label
v.db.dropcolumn map=gates_final column=value
v.db.addcolumn map=gates_final columns="gate INT"
v.what.rast map=gates_final raster=gates_gateID column=gate type=centroid

# # points (each individual gate pixel)
# r.to.vect input=gates_final output=gates_final_pts type=point --o
# v.db.dropcolumn map=gates_final_pts column=label
# v.db.dropcolumn map=gates_final_pts column=value
# v.db.addcolumn map=gates_final_pts columns="gate INT"
# v.what.rast map=gates_final_pts raster=gates_gateID column=gate type=point
#+END_SRC
#+RESULTS:
**** Mean x,y
#+BEGIN_SRC bash :results verbatim
# v.db.addcolumn map=gates_final columns="x INT, y INT, mean_x INT, mean_y INT, area INT"
v.db.addcolumn map=gates_final columns="mean_x INT, mean_y INT"
v.to.db map=gates_final option=coor columns=x,y units=meters
v.to.db map=gates_final option=area columns=area units=meters

for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
  db.execute sql="UPDATE gates_final SET mean_x=(SELECT AVG(x) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
  db.execute sql="UPDATE gates_final SET mean_y=(SELECT AVG(y) FROM gates_final WHERE gate == ${G}) where gate == ${G}"
done

v.out.ascii -c input=gates_final columns=gate,mean_x,mean_y | cut -d"|" -f4- | sort -n|uniq | v.in.ascii input=- output=gates_final_pts skip=1 cat=1 x=2 y=3 --o
v.db.addtable gates_final_pts
v.db.addcolumn map=gates_final_pts columns="gate INT"
v.db.update map=gates_final_pts column=gate query_column=cat

# v.db.addcolumn map=gates_final_pts columns="mean_x INT, mean_y INT"
v.to.db map=gates_final_pts option=coor columns=mean_x,mean_y units=meters
#+END_SRC
#+RESULTS:

Here we have:
#+BEGIN_SRC bash :results verbatim :tangle no
db.select table=gates_final|head -n10 # cat|gate|x|y|mean_x|mean_y
db.select table=gates_final_pts|head # cat|gate|mean_x|mean_y
#+END_SRC
#+RESULTS:

**** Mean lon,lat
#+BEGIN_SRC bash :results verbatim
v.what.rast map=gates_final_pts raster=lon@PERMANENT column=lon
v.what.rast map=gates_final_pts raster=lat@PERMANENT column=lat

v.db.addcolumn map=gates_final columns="mean_lon DOUBLE PRECISION, mean_lat DOUBLE PRECISION"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET mean_lon=(SELECT lon FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
    db.execute sql="UPDATE gates_final SET mean_lat=(SELECT lat FROM gates_final_pts WHERE gate = ${G}) where gate = ${G}"
done
#+END_SRC
#+RESULTS:

**** Sector, Region, Names, etc.
+ Sector Number
+ Region Code
+ Nearest Sector or Glacier Name
#+BEGIN_SRC bash :results verbatim
v.db.addcolumn map=gates_final columns="sector INT"
v.db.addcolumn map=gates_final_pts columns="sector INT"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=sector to_column=cat

v.db.addcolumn map=gates_final columns="region VARCHAR(2)"
v.db.addcolumn map=gates_final_pts columns="region VARCHAR(2)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=region to_column=SUBREGION1

v.db.addcolumn map=gates_final columns="Mouginot_2019 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Mouginot_2019 VARCHAR(99)"
v.distance from=gates_final to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME
v.distance from=gates_final_pts to=sectors@Mouginot_2019 upload=to_attr column=Mouginot_2019 to_column=NAME

v.db.addcolumn map=gates_final columns="Bjork_2015 VARCHAR(99)"
v.db.addcolumn map=gates_final_pts columns="Bjork_2015 VARCHAR(99)"
v.distance from=gates_final to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name
v.distance from=gates_final_pts to=names@Bjork_2015 upload=to_attr column=Bjork_2015 to_column=name


v.db.addcolumn map=gates_final columns="n_pixels INT"
v.db.addcolumn map=gates_final_pts columns="n_pixels INT"
for G in $(db.select -c sql="select gate from gates_final"|sort -n|uniq); do
    db.execute sql="UPDATE gates_final SET n_pixels=(SELECT SUM(area)/(200*200) FROM gates_final WHERE gate = ${G}) where gate = ${G}"
    # now copy that to the average gate location (point) table
    db.execute sql="UPDATE gates_final_pts SET n_pixels = (SELECT n_pixels FROM gates_final WHERE gate = ${G}) WHERE gate = ${G}"
done
#+END_SRC
**** Clean up
#+BEGIN_SRC bash :results verbatim
db.dropcolumn -f table=gates_final column=area
# db.dropcolumn -f table=gates_final column=cat
#+END_SRC
#+RESULTS:

**** Export as metadata CSV
#+BEGIN_SRC bash :results verbatim
mkdir -p out
db.select sql="SELECT gate,mean_x,mean_y,lon,lat,n_pixels,sector,region,Bjork_2015,Mouginot_2019 from gates_final_pts" separator=, | sort -n | uniq  > ./out/gate_meta.csv
#+END_SRC
#+RESULTS:

*** Export Gates to KML
#+BEGIN_SRC bash :results verbatim
v.out.ogr input=gates_final output=./tmp/gates_final_${VELOCITY_CUTOFF}_${BUFFER_DIST}.kml format=KML --o
#+END_SRC
#+RESULTS:


** Effective Velocity
:PROPERTIES:
:header-args:bash+: :tangle vel_eff.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC
#+RESULTS:


*** ENVEO
#+BEGIN_SRC bash :results verbatim
g.mapsets -l

r.mask -r

MAPSET=$(g.mapsets --q -l separator=newline| grep "gates_")

g.mapset ENVEO
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=vx_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=vx_????_??_??); do
  VY=${VX/vx/vy}
  ERR=${VX/vx/err}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY}))))"
  r.mapcalc "err_eff_${DATE} = 365 * ${ERR} * (not(isnull(gates_x@${MAPSET})) || not(isnull(gates_y@${MAPSET})))"
  r.null map=vel_eff_${DATE} null=0
  r.null map=err_eff_${DATE} null=0
done

# fix return code of this script so make continues
MSG_OK "vel_eff DONE" 
#+END_SRC
#+RESULTS:

*** COMMENT Sentinel 1
#+BEGIN_SRC bash :results verbatim :tangle no
g.mapsets -l

r.mask -r

MAPSET=$(g.mapsets --q -l separator=newline| grep "gates_")

g.mapset Sentinel1
g.region -d
r.mapcalc "MASK = if((gates_x@${MAPSET} == 1) | (gates_y@${MAPSET} == 1), 1, null())" --o
VX=$(g.list type=raster pattern=vx_????_??_?? | head -n1) # DEBUG
for VX in $(g.list type=raster pattern=vx_????_??_??); do
  VY=${VX/vx/vy}
  EX=${VX/vx/ex}
  EY=${VX/vx/ey}
  DATE=$(echo $VX | cut -d"_" -f2-)
  echo $DATE
  r.mapcalc "vel_eff_${DATE} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(${VX}), 0, abs(${VX}))) + if(gates_y@${MAPSET}, if(isnull(${VY}), 0, abs(${VY}))))"
  r.mapcalc "err_eff_${DATE} = 365 * (if(gates_x@${MAPSET} == 1, if(isnull(${EX}), 0, abs(${EX}))) + if(gates_y@${MAPSET}, if(isnull(${EY}), 0, abs(${EY}))))"
  r.null map=vel_eff_${DATE} null=0
  r.null map=err_eff_${DATE} null=0
done

# fix return code of this script so make continues
MSG_OK "vel_eff DONE" 
#+END_SRC
#+RESULTS:

** Export all data to CSV
:PROPERTIES:
:header-args:bash+: :tangle export.sh
:END:

#+BEGIN_SRC bash :results verbatim
<<MSGS_pretty_print>>
<<GRASS_config>>
#+END_SRC
#+RESULTS:

#+BEGIN_SRC bash :results output
MSG_OK "Exporting..."
g.mapset PERMANENT
g.region -dp

MAPSET=$(g.mapsets --q -l separator="\n"| grep "gates_")

VEL_baseline="vel_baseline@ENVEO vx_baseline@ENVEO vy_baseline@ENVEO vel_err_baseline@ENVEO err_baseline@ENVEO"
VEL_ENVEO=$(g.list -m mapset=ENVEO type=raster pattern=vel_eff_????_??_?? separator=space)
ERR_ENVEO=$(g.list -m mapset=ENVEO type=raster pattern=err_eff_????_??_?? separator=space)
#VEL_Sentinel=$(g.list -m mapset=Sentinel1 type=raster pattern=vel_eff_????_??_?? separator=space)
#ERR_Sentinel=$(g.list -m mapset=Sentinel1 type=raster pattern=err_eff_????_??_?? separator=space)
THICK=$(g.list -m mapset=DEM type=raster pattern=DEM_???? separator=space)
#THICK=$(g.list -m mapset=SEC type=raster pattern=dh_???? separator=space)
# GIMP_0715=dem@GIMP.0715,day@GIMP.0715 # ,err@GIMP.0715

LIST="lon lat err_2D gates_x@${MAPSET} gates_y@${MAPSET} gates_gateID@${MAPSET} sectors@Zwally_2012 sectors@Mouginot_2019 regions@Mouginot_2019 bed@BedMachine thickness@BedMachine surface@BedMachine ${THICK} ${VEL_baseline} ${VEL_ENVEO} errbed@BedMachine ${ERR_ENVEO}"

# ,${VEL_Sentinel},${ERR_Sentinel}

#r.mask gates_final@${MAPSET} --o
mkdir tmp/dat
r.mapcalc "MASK = if(gates_final@${MAPSET}) | if(mask_GIC@Mouginot_2019) | if(vel_err_baseline@ENVEO) | if(DEM_2020@DEM)" --o
parallel --bar "if [[ ! -e ./tmp/dat/{1}.bsv ]]; then (echo x\|y\|{1}; r.out.xyz input={1}) > ./tmp/dat/{1}.bsv; fi" ::: ${LIST}
r.mask -r
# test
# for v in $(echo $LIST | tr ',' '\n'); do n=$(r.univar $v|grep "^n:"); echo ${v}: ${n}; done

# combine individual files to one mega csv
cat ./tmp/dat/lat.bsv | cut -d"|" -f1,2 | datamash -t"|" transpose > ./tmp/dat_t.bsv
for f in ./tmp/dat/*; do
  cat $f | cut -d"|" -f3 | datamash -t"|" transpose >> ./tmp/dat_t.bsv
done
cat ./tmp/dat_t.bsv |datamash -t"|" transpose | tr '|' ',' > ./tmp/dat.csv
rm ./tmp/dat_t.bsv

#date
#MSG_WARN "Exporting: $(echo $LIST|tr ',' '\n' |wc -l) columns"
#ulimit -n 2048
#time (echo x,y,${LIST}; r.out.xyz input=${LIST} separator=comma) > ./tmp/dat.csv
#r.mask -r
#+END_SRC
#+RESULTS:
** Compute Errors
:PROPERTIES:
:header-args:python+: :tangle errors.py
:END:

*** Results (Mouginot 2019 Sector)
#+BEGIN_SRC python :results raw drawer :session discharge :display text/org
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat.csv")

err_sector = pd.DataFrame(columns=['D', 'E', 'E%'])
err_sector.index.name = 'Sector'

sectors = np.unique(df['sectors@Mouginot_2019'].values)
for s in sectors:
    sub = df[df['sectors@Mouginot_2019'] == s]
    thick = sub['thickness@BedMachine']
    vel = sub['vel_baseline@ENVEO']
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub['errbed@BedMachine'].values)
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_sector.loc[s] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_sector.loc['GIS'] = np.sum(err_sector, axis=0)
err_sector.loc['GIS']['E%'] = err_sector.loc['GIS']['E']/err_sector.loc['GIS']['D']*100

err_sector.to_csv('./tmp/err_sector_mouginot.csv')

err_sector.rename(columns = {'D':'D [Gt]',
                             'E':'Error [Gt]',
                             'E%':'Error [%]'}, inplace=True)

err_sector
#+END_SRC

#+RESULTS:
| Sector |      D [Gt] | Error [Gt] | Error [%] |
|--------+-------------+------------+-----------|
|      1 |     1.13636 |   0.115502 |   10.1642 |
|      2 |    0.908778 |   0.193401 |   21.2815 |
|      3 |     11.4881 |   0.824422 |    7.1763 |
|      4 |     2.91582 |   0.304107 |   10.4296 |
|      6 |     10.8265 |   0.919606 |   8.49401 |
|      7 |     0.89246 |  0.0744315 |   8.34004 |
|      8 |    0.648552 |  0.0401655 |    6.1931 |
|      9 |     11.2917 |   0.627721 |   5.55913 |
|     10 |     2.16995 |   0.123117 |   5.67372 |
|     14 |     2.48669 |   0.199724 |   8.03172 |
|     15 |     1.06562 |   0.294537 |     27.64 |
|     16 |     5.45103 |   0.440319 |   8.07772 |
|     19 |    0.270501 |   0.110674 |   40.9145 |
|     20 |    0.767355 |  0.0492437 |   6.41734 |
|     21 |     1.80726 |  0.0974649 |   5.39296 |
|     22 |     1.00093 |  0.0841373 |   8.40591 |
|     23 |    0.895347 |  0.0683989 |   7.63937 |
|     25 |    0.029346 | 0.00512194 |   17.4536 |
|     26 |     1.67654 |  0.0936123 |   5.58367 |
|     27 |     6.05449 |   0.273441 |   4.51633 |
|     28 |    0.805786 |   0.032577 |   4.04289 |
|     29 |     1.96217 |   0.116086 |   5.91621 |
|     30 |     1.83275 |   0.116705 |   6.36774 |
|     31 |    0.422771 |  0.0319242 |   7.55119 |
|     32 |     5.59584 |   0.344155 |   6.15018 |
|     33 |     6.38654 |    0.46026 |   7.20672 |
|     34 |     4.70521 |   0.364038 |   7.73692 |
|     35 |     7.01158 |   0.895814 |   12.7762 |
|     36 |     8.79645 |   0.644694 |   7.32903 |
|     37 |      8.2441 |   0.472339 |   5.72942 |
|     38 |     6.32872 |   0.440766 |   6.96455 |
|     41 |     2.23386 |   0.127442 |     5.705 |
|     42 |    0.803985 |  0.0512305 |   6.37207 |
|     43 |     3.68078 |   0.189515 |   5.14878 |
|     44 |    0.877821 |  0.0481893 |   5.48964 |
|     45 |    0.766472 |  0.0488558 |   6.37412 |
|     47 |     1.41008 |   0.135603 |   9.61666 |
|     48 |     2.50234 |   0.329722 |   13.1765 |
|     49 |    0.966754 |  0.0940565 |    9.7291 |
|     50 |     6.28814 |     0.2806 |   4.46237 |
|     53 |     3.90265 |   0.262703 |   6.73141 |
|     55 |    0.109432 |  0.0276098 |   25.2302 |
|     56 |    0.786596 |   0.154163 |   19.5988 |
|     58 |     11.4567 |   0.688932 |   6.01334 |
|     59 |      15.567 |    1.29056 |   8.29037 |
|     60 |      9.0555 |   0.608475 |   6.71939 |
|     61 |     2.24076 |   0.395304 |   17.6415 |
|     62 |    0.593675 |  0.0322815 |   5.43757 |
|     63 |     30.3913 |    2.99546 |   9.85631 |
|     64 |     5.03947 |   0.422238 |   8.37862 |
|     65 |     3.80811 |  0.0994075 |   2.61042 |
|     67 |    0.202655 |   0.703541 |   347.162 |
|     68 |     3.68474 |  0.0750308 |   2.03626 |
|     69 |     2.22766 |   0.171304 |   7.68986 |
|     70 |    0.650101 |   0.422143 |   64.9349 |
|     72 |     1.10276 |  0.0672873 |   6.10169 |
|     73 |  0.00110613 |   0.188115 |   17006.6 |
|     74 |     4.35112 |   0.399408 |   9.17943 |
|     75 |    0.145543 |    0.04469 |   30.7057 |
|     76 |     1.70487 |   0.239754 |   14.0629 |
|     78 |     2.55006 |   0.109305 |   4.28638 |
|     80 |     7.38191 |   0.550931 |   7.46325 |
|     81 |     6.02572 |   0.468044 |   7.76742 |
|     82 |     1.33453 |   0.122178 |   9.15508 |
|     83 |     4.15658 |   0.507123 |   12.2005 |
|     84 |     1.60693 |   0.176951 |   11.0117 |
|     86 |     6.56638 |     0.6114 |   9.31107 |
|     88 |   0.0161452 |  0.0435953 |    270.02 |
|     93 |     2.04422 |   0.118953 |   5.81902 |
|     94 |     1.18427 |   0.332161 |   28.0477 |
|     95 |     8.83575 |   0.289838 |   3.28029 |
|     96 |     5.06139 |   0.641972 |   12.6837 |
|     97 |  0.00532853 |  0.0315232 |   591.593 |
|     98 |     1.69358 |   0.297288 |   17.5538 |
|     99 | 6.75698e-05 | 0.00849267 |   12568.7 |
|    100 |    0.184706 |   0.121455 |   65.7562 |
|    102 |     23.1246 |    1.23201 |    5.3277 |
|    103 |    0.154002 |  0.0160936 |   10.4503 |
|    104 |     0.49088 |  0.0520854 |   10.6106 |
|    106 |     14.9256 |   0.466246 |    3.1238 |
|    107 |     3.84582 |   0.339018 |   8.81522 |
|    108 |    0.595502 |   0.165221 |   27.7449 |
|    109 |   0.0884075 |   0.042508 |    48.082 |
|    110 |    0.205879 |  0.0211271 |   10.2619 |
|    111 |  0.00582636 |   0.393715 |   6757.48 |
|    113 | 0.000794878 |   0.100536 |     12648 |
|    114 |     1.38749 |   0.120317 |   8.67155 |
|    115 |    0.897201 |    0.20931 |   23.3292 |
|    117 |     6.98255 |   0.525467 |   7.52543 |
|    118 | 0.000957382 |   0.166821 |   17424.7 |
|    120 |    0.412083 |   0.102889 |   24.9682 |
|    121 |     2.25015 |   0.512606 |   22.7809 |
|    122 |   0.0492951 |   0.488022 |   990.001 |
|    124 |  0.00105356 |   0.171178 |   16247.6 |
|    125 |     1.59346 |  0.0753527 |   4.72888 |
|    126 |     2.38866 |   0.209683 |   8.77827 |
|    127 |     9.53131 |   0.556236 |   5.83588 |
|    128 |   0.0029097 |    0.57392 |   19724.4 |
|    134 |     2.85382 |     1.4367 |   50.3433 |
|    135 |   0.0190592 |  0.0324244 |   170.125 |
|    136 |  0.00879623 |   0.102694 |   1167.48 |
|    138 |   0.0996933 |  0.0314422 |    31.539 |
|    139 |      0.2357 |  0.0701601 |   29.7666 |
|    140 |     1.04003 |   0.121997 |   11.7301 |
|    141 |    0.258956 |  0.0561728 |   21.6921 |
|    142 |    0.210307 |  0.0415359 |   19.7501 |
|    146 |    0.513598 |   0.063135 |   12.2927 |
|    147 |     2.90962 |   0.253602 |   8.71601 |
|    148 |      1.2819 |  0.0842873 |   6.57516 |
|    150 |    0.238113 |   0.133588 |   56.1028 |
|    151 |    0.215437 |  0.0542768 |   25.1938 |
|    152 |    0.171266 |  0.0699659 |   40.8523 |
|    153 |    0.280762 |  0.0780211 |   27.7891 |
|    154 |    0.716738 |    0.10592 |   14.7781 |
|    156 |  0.00128292 |    0.22432 |   17485.1 |
|    157 |  0.00904871 |  0.0105535 |    116.63 |
|    158 |    0.321452 |  0.0805232 |   25.0498 |
|    164 |    0.015171 |   0.041483 |   273.437 |
|    167 | 9.52965e-05 |  0.0136362 |   14309.2 |
|    172 | 0.000256998 |  0.0366889 |     14276 |
|    174 |  0.00019268 |  0.0113515 |   5891.37 |
|    183 |    0.179814 |   0.037001 |   20.5774 |
|    185 |    0.398766 |  0.0630249 |    15.805 |
|    189 |       6.042 |   0.308196 |    5.1009 |
|    190 |     4.15765 |     2.0767 |   49.9487 |
|    192 |      4.9286 |   0.459816 |   9.32955 |
|    193 |     1.84566 |  0.0888249 |   4.81264 |
|    195 |    0.218933 |  0.0297228 |   13.5762 |
|    197 |     0.60224 |  0.0508668 |   8.44628 |
|    199 |    0.404987 |    0.49271 |   121.661 |
|    203 |     0.79559 |   0.105298 |   13.2353 |
|    204 |    0.101074 |   0.019955 |    19.743 |
|    207 |     6.56012 |   0.468184 |   7.13683 |
|    208 |     3.20135 |   0.349065 |   10.9037 |
|    209 |     0.78797 |   0.141833 |   17.9998 |
|    210 |    0.571084 |  0.0650242 |   11.3861 |
|    211 |     3.38362 |   0.110959 |    3.2793 |
|    212 |     4.54297 |   0.190982 |   4.20389 |
|    213 |     4.63417 |   0.506259 |   10.9245 |
|    214 |     8.39299 |   0.467779 |   5.57345 |
|    215 |   0.0521331 |  0.0802041 |   153.845 |
|    216 |     0.66763 |  0.0773952 |   11.5925 |
|    218 |     30.7332 |    2.56227 |   8.33713 |
|    219 |    0.403487 |  0.0707834 |   17.5429 |
|    222 |   0.0898964 |  0.0201874 |   22.4563 |
|    223 |     11.3835 |   0.318286 |   2.79603 |
|    224 |    0.465393 |    0.17042 |   36.6184 |
|    231 |    0.930879 |   0.110524 |   11.8731 |
|    232 | 0.000300861 |  0.0524098 |   17419.9 |
|    233 |     4.20433 |    0.28694 |   6.82485 |
|    234 |   0.0192938 | 0.00886986 |   45.9727 |
|    237 |    0.356911 |   0.227127 |   63.6368 |
|    239 |     0.16309 |  0.0146806 |   9.00151 |
|    240 |   0.0723574 | 0.00594069 |    8.2102 |
|    243 |     1.36437 |   0.199452 |   14.6186 |
|    245 |    0.188843 |  0.0451201 |   23.8929 |
|    248 |     8.81223 |   0.406155 |   4.60899 |
|    249 |     1.42356 |   0.132901 |   9.33582 |
|    251 |   0.0292431 |  0.0137256 |   46.9361 |
|    254 |    0.581071 |  0.0951835 |   16.3807 |
|    255 |     1.05098 |   0.115429 |   10.9829 |
|    257 | 7.83737e-05 |  0.0120324 |   15352.6 |
|    258 | 0.000377353 |   0.060194 |   15951.6 |
|    GIS |     476.153 |    44.6966 |   9.38702 |

*** Results (Mouginot 2019 Region)
#+BEGIN_SRC python :results raw drawer :session discharge :display text/org
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat.csv")

err_sector = pd.DataFrame(columns=['D','E', 'E%'])
err_sector.index.name = 'Sector'

sectors = np.unique(df['regions@Mouginot_2019'].values)
for s in sectors:
   sub = df[df['regions@Mouginot_2019'] == s]
   thick = sub['thickness@BedMachine']
   vel = np.abs(sub['vx_baseline@ENVEO'])*sub['gates_x@gates_150_10000'] + np.abs(sub['vy_baseline@ENVEO'])*sub['gates_y@gates_150_10000']
   D = 200  * thick * vel * 917 / 1E12
   err_thick = np.abs(sub['errbed@BedMachine'].values)
   # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
   e_th = 200 * err_thick * vel * 917 / 1E12
   err_sector.loc[s] = [np.sum(D), np.sum(e_th), np.round(np.sum(e_th),10)/np.round(np.sum(D),10)*100]

err_sector.loc['GIS'] = np.sum(err_sector, axis=0)
err_sector.loc['GIS']['E%'] = err_sector.loc['GIS']['E']/err_sector.loc['GIS']['D']*100

err_sector.to_csv('./tmp/err_region_mouginot.csv')

err_sector.rename(columns = {'D':'D [Gt]', 
                         'E':'Error [Gt]',
                         'E%':'Error [%]'}, inplace=True)

err_sector
#+END_SRC

#+RESULTS:
| Sector |    D [Gt] | Error [Gt] | Error [%] |
|--------+-----------+------------+-----------|
|      1 | 0.0732849 | 0.00470999 |   6.42696 |
|      2 | 0.0823817 | 0.00651088 |    7.9033 |
|      3 |  0.210029 |  0.0190811 |   9.08501 |
|      4 |  0.370091 |  0.0407197 |   11.0026 |
|      5 | 0.0546231 | 0.00890458 |   16.3018 |
|      6 |  0.214758 |  0.0164815 |   7.67446 |
|      7 |  0.316332 |  0.0236688 |   7.48227 |
|    GIS |    1.3215 |   0.120077 |   9.08639 |

*** Results (Gate)                                                 :noexport:
#+BEGIN_SRC python :results raw drawer :session discharge :display text/org
from uncertainties import unumpy
import pandas as pd
import numpy as np

df = pd.read_csv("./tmp/dat.csv")

err_gate = pd.DataFrame(columns=['D','E', 'E%'])
err_gate.index.name = 'Gate'

gates = np.unique(df['gates_gateID@gates_150_10000'].values)
for g in gates:
    sub = df[df['gates_gateID@gates_150_10000'] == g]
    thick = sub['thickness@BedMachine']
    vel = np.abs(sub['vx_baseline@ENVEO'])*sub['gates_x@gates_150_10000'] + np.abs(sub['vy_baseline@ENVEO'])*sub['gates_y@gates_150_10000']
    D = 200  * thick * vel * 917 / 1E12
    err_thick = np.abs(sub['errbed@BedMachine'].values)
    # err_thick[np.where(err_thick < 50)] = 50  # IS THIS REASONABLE? IMPORTANT?
    e_th = 200 * err_thick * vel * 917 / 1E12
    err_gate.loc[g] = [np.sum(D), np.sum(e_th), np.sum(e_th)/np.sum(D)*100]

err_gate.loc['GIS'] = np.sum(err_gate, axis=0)
err_gate.loc['GIS']['E%'] = err_gate.loc['GIS']['E']/err_gate.loc['GIS']['D']*100

gate_meta = pd.read_csv("./out/gate_meta.csv")
err_gate['name'] = ''
for g in err_gate.index.values:
    if (g == 'GIS'): continue
    if (sum(gate_meta.gate == g) == 0): continue
    err_gate.loc[g,'name'] = gate_meta[gate_meta.gate == g].Mouginot_2019.values[0]

err_gate.to_csv('./tmp/err_gate.csv')
err_gate.rename(columns = {'D':'D [Gt]', 
                           'E':'Error [Gt]',
                           'E%':'Error [%]'}, inplace=True),

err_gate
#+END_SRC



** Raw data to discharge product
:PROPERTIES:
:header-args:python+: :tangle raw2discharge.py :session raw2discharge
:END:
*** Load data

+ What columns are in the file?
+ Don't show all the "vel_eff_YYYY_MM_DD" and "err_eff_YYYY_MM_DD" columns.
#+BEGIN_SRC bash :results verbatim :tangle no
head -n1 ./tmp/dat.csv | tr ',' '\n' | grep -v "vel_eff_*" | grep -v "err_eff_*" | grep -v "dh_*" | sort | uniq | tr '\n' '\t'
echo "also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc."
#+END_SRC

#+RESULTS:
: bed@BedMachine	err_2D	err_baseline@ENVEO	errbed@BedMachine	gates_gateID@gates_150_10000	gates_x@gates_150_10000	gates_y@gates_150_10000	lat	lon	regions@Mouginot_2019	sectors@Mouginot_2019	sectors@Zwally_2012	surface@BedMachine	thickness@BedMachine	vel_baseline@ENVEO	vel_err_baseline@ENVEO	vx_baseline@ENVEO	vy_baseline@ENVEO	x	y	org_babel_sh_prompt> also: dh_YYYY@elev, vel_eff_YYYY_MM_DD@various, etc.

#+NAME: load_data
#+BEGIN_SRC python :exports none :results raw drawer
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime as dt

# pd.options.display.notebook_repr_html = False

###
### Load metadata
### 
meta_cols = ["x", "y", "err_2D", 
             "regions@Mouginot_2019", "sectors@Zwally_2012", "gates_gateID@gates_150_10000"]
meta = pd.read_csv("./tmp/dat.csv", usecols=meta_cols)
# rename columns
meta.rename(inplace=True, columns={'regions@Mouginot_2019':'regions', 
                                   'sectors@Zwally_2012':'sectors',
                                   'gates_gateID@gates_150_10000':'gates'})
regions = {1:'NO', 2:'NE', 3:'CE', 4:'SE', 5:'SW', 6:'CW', 7:'NW'}
meta['regions'] = meta['regions'].map(regions.get) # Convert sector numbers to meaningful names
meta['ones'] = 1

R = pd.read_csv('./out/gate_meta.csv')
meta['name'] = ''

for g in meta['gates'].unique(): meta.loc[meta['gates'] == g, 'name'] = R[R['gate'] == g]['Mouginot_2019'].values[0]

###
### Load BASELINE velocity
###
vel_baseline = pd.read_csv("./tmp/dat.csv", usecols=['vel_baseline@ENVEO'])
vel_baseline.rename(inplace=True, columns={'vel_baseline@ENVEO':'vel'})

###
### Load all velocity
###
vel = pd.read_csv("./tmp/dat.csv", usecols=(lambda c: (('vel_eff' in c) & ('ENVEO' in c))))

#vel.rename(columns=lambda c: pd.to_datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)


# Convert column names to datetime
def convert_to_datetime(col_name):
    try:
        year = int(col_name[8:12])
        month = int(col_name[13:15])
        day = int(col_name[16:18])
        return pd.to_datetime(f"{year}-{month:02d}-{day:02d}")
    except Exception as e:
        print(f"Error converting column '{col_name}': {e}")
        return col_name  # Return original column name if conversion fails

vel.rename(columns=lambda c: convert_to_datetime(c), inplace=True)


# vel.drop(columns=pd.datetime(1999, 7, 1), inplace=True) # bad year?
vel.replace(0, np.nan, inplace=True)
# vel = vel.loc[:,vel.columns.year < 2018] # drop 2018
# vel = vel.loc[:,vel.columns.year >= 1985] # drop early years
vel.sort_index(axis='columns', inplace=True)

####################
# Filter Velocity: Rolling Windows
##################
def filter_bad_v(v):
    WINDOW=30
    SIGMA=2
    vel_rolling = v.T.rolling(window=WINDOW, center=True, min_periods=1).mean().T
    vel_residual = v - vel_rolling
    vel_std = vel_residual.T.rolling(window=WINDOW, center=True, min_periods=1).std().T
    vel_outlier = (v > vel_rolling+SIGMA*vel_std) | ( v < vel_rolling-SIGMA*vel_std)
    v[vel_outlier] = np.nan
    return v
####################
# vel = filter_bad_v(vel)
# vel = filter_bad_v(vel)
# vel = filter_bad_v(vel)


vel = vel.interpolate(method='time', axis=1, limit_area='inside')
vel.fillna(method='ffill', axis=1, inplace=True)
vel.fillna(method='bfill', axis=1, inplace=True)


# vel[meta.name == TESTNAME].T.sort_index().head()
# fill[meta.name == TESTNAME].T.sort_index().head()

# vel.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()/1E6

###
### Load all velocity ERROR
###
err = pd.read_csv("./tmp/dat.csv", usecols=(lambda c: ('err_eff' in c)))
#err.rename(columns=lambda c: pd.to_datetime(int(c[8:12]), int(c[13:15]), int(c[16:18])), inplace=True)
err.rename(columns=lambda c: convert_to_datetime(c), inplace=True)

err.replace(0, np.nan, inplace=True)
# err = err.loc[:,err.columns.year > 1985] # drop early years
err.sort_index(axis='columns', inplace=True)
# err.interpolate(method='time', limit_area='inside', axis=1 inplace=True)
err.fillna(method='ffill', axis=1, inplace=True)
err.fillna(method='backfill', axis=1, inplace=True)

for c in err.columns[err.columns.duplicated()]:
    err.drop(columns=c, inplace=True)

# make sure we have error (even if 0) for each velocity, and no err w/o vel
for c in vel.columns:
    if c not in err.columns:
        err[c] = np.nan

for c in err.columns:
    if c not in vel.columns:
        err.drop(columns=c, inplace=True)
    
err.sort_index(axis='columns', inplace=True)

# tmp = np.array([c if c not in err.columns else None for c in vel.columns]); print(tmp[tmp != None])

###
### DEM
###
dem = pd.read_csv("./tmp/dat.csv", usecols=(lambda c: ('DEM' in c)))
mv = {}
for c in dem.columns: mv[c] = int(c.split('@')[0].split('_')[1])
dem.rename(inplace=True, columns=mv)


###
### Thickness
###
th = pd.read_csv("./tmp/dat.csv", usecols=["thickness@BedMachine",
                                           "surface@BedMachine",
                                           "bed@BedMachine",
                                           "errbed@BedMachine",
                                           # "bed_0@Millan_2018",
                                           # "thickness_0@Millan_2018",
                                           "gates_gateID@gates_150_10000"])
th.rename(inplace=True, columns={'errbed@BedMachine': 'err',
                                 'gates_gateID@gates_150_10000':'gates'})


th['thick'] = dem[2020] - th['bed@BedMachine']
# th_GIMP = pd.read_csv("./tmp/dat.csv", usecols=(lambda c: ('@GIMP.0715' in c)))
# th_GIMP['day'] = [dt.datetime(2000,1,1) + dt.timedelta(days=np.int(_)) for _ in th_GIMP['day@GIMP.0715']]
# for _ in th_GIMP.columns: th[_] = th_GIMP[_]
# del(th_GIMP)


###
### dh/dt
###
#dhdt = pd.read_csv("./tmp/dat.csv", usecols=(lambda c: ('dh' in c)))
#mv = {}
#for c in dhdt.columns: mv[c] = int(c.split('@')[0].split('_')[1])
#dhdt.rename(inplace=True, columns=mv)

# assume linear trend average of adjacent 3 years for missing years
# dhdt[2018] = dhdt.loc[:,2015:2017].mean(axis='columns')
# dhdt[2019] = dhdt.loc[:,2015:2017].mean(axis='columns')
# dhdt[2018] = 0
# dhdt[2019] = 0

# for y in np.arange(1985,1994+1): dhdt[y] = dhdt.loc[:,1995:1997].mean(axis='columns')
# dhdt.sort_index(axis='columns', inplace=True)

# what is the unadjusted discharge using BedMachine thickness?
D = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D_sum = D.sum(axis='rows')#.resample('1D').mean().interpolate(method='time', limit_area='inside').resample('M').mean()

D_sum.to_csv('out/constant_thickness_GIS_D.csv', float_format='%.5f', header=["Discharge [Gt yr-1]"])
#+END_SRC

#+RESULTS: load_data
:results:
None
:end:



*** Adjust thickness 
**** Adjust "bad" thickness
Here we perform a few thickness adjustments:

First, patch in Millan (2018) where it exists.

+ 300 :: All ice <= 20 m thick is assumed bad and set to the minimum
         "good" thickness in a gate if good exists, or 300 m if it
         does not exist
+ 400 :: All ice <= 50 m thick is set to 400 m thick
+ fit :: All ice <= 20 m thick is fit to the log10(thickness) v.
         log10(velocity) relationship, even though it is not a good
         fit.

For testing, gate clumps 9 (all bad) and 546 (some bad)

#+CALL: load_data[:results none]()

#+NAME: adjust_thickness
#+BEGIN_SRC python :exports none :results raw drawer :display text/org
th['bad'] = th['thick'] <= 20

th['thick_adj_300'] = th['thick']
th['thick_adj_300_err'] = th['err']
for g in th[th['bad']]['gates'].unique(): # only work on gates with some (or all) bad thickness
    if all(th[th['gates'] == g]['bad']): # If all bad, set to 300
        th.loc[th['gates'] == g, 'thick_adj_300'] = 300
        th.loc[th['gates'] == g, 'thick_adj_300_err'] = 300/2.

    elif any(th[th['gates'] == g]['bad']): # If any bad, set to minimum of good.
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300'] = \
        (th.loc[(th['gates'] == g) & (~th['bad']), 'thick']).min()
        th.loc[(th['gates'] == g) & (th['bad']), 'thick_adj_300_err'] = 300/2.

# aggressive: Anything <= 50 gets 400 m thickness
th['thick_adj_400'] = [400 if T <= 50 else T for T in th['thick']]
th['thick_adj_400_err'] = [400/2. if T[0] <= 50 else T[1] for T in zip(th['thick'],th['err'])]
#+END_SRC

#+RESULTS: adjust_thickness
:results:
None
:end:

#+BEGIN_SRC python :exports none :results raw drawer :display text/org :session discharge :tangle no
<<load_data>>
<<adjust_thickness>>

print(th.describe())
#+END_SRC

#+RESULTS:
:results:
None
:end:

#+BEGIN_SRC python :exports none :results raw drawer :display text/org :session discharge
D0 = (vel).apply(lambda c: c * (200 * th['thick'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside',).resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['BedMachine','300','diff'])
#+END_SRC

#+RESULTS:
:results:
:end:


**** Adjust thickness w thickness v. velocity fit.

#+NAME: adjust_thickness_fit
#+BEGIN_SRC python :exports none :results raw drawer :display text/plain
CUTOFF = 20
df = vel_baseline.join(th['thick'])
max_vel = df.loc[df['thick'] <= CUTOFF, 'vel'].max() # limit fit to velocities where data is missing
# df = df[(df['thick'] > CUTOFF) & (df['vel'] <= max_vel)]
df = df[df['thick'] > CUTOFF]
# df = df[df['vel'] <= max_vel]

import statsmodels.api as sm
y = (df['thick'])
X = np.log10(df['vel'])
X = sm.add_constant(X)
model = sm.OLS(y, X)
fits = model.fit()
# print(fits.summary())
predictions = fits.predict(X)

from statsmodels.sandbox.regression.predstd import wls_prediction_std
XX = np.linspace(X['vel'].min(), X['vel'].max(), 50)
XX = sm.add_constant(XX)
yy = fits.predict(XX)
sdev, lower, upper = wls_prediction_std(fits, exog=XX, alpha=0.05)

fig = plt.figure(1, figsize=(4,4)) # w,h
# get_current_fig_manager().window.move(0,0)
fig.clf()
# fig.set_tight_layout(True)

ax = fig.add_subplot(111)
im = ax.scatter(X['vel'], y, alpha=0.1, color='k')
xl, yl = ax.get_xlim(), ax.get_ylim()
ax.set_ylabel('Thickness [m]')
ax.set_xlabel('Velocity [m yr$^{-1}$]')
ax.plot(XX[:,1], yy, 'r--')
ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.4)
ax.fill_between(XX[:,1], lower, upper, color='#888888', alpha=0.1)
# ax.set_xlim(50,xl[1])
ax.set_ylim(0,yl[1])
plt.savefig('./tmp/vel_thick_fit.png', transparent=True, bbox_inches='tight', dpi=300)
plt.savefig('./tmp/vel_thick_fit.pdf', transparent=True, bbox_inches='tight', dpi=300)
            
th['fit'] = th['thick']
vel_where_thick_bad = vel_baseline.loc[th['bad'] == True, 'vel']
th.loc[th['bad'] == True, 'fit'] = fits.predict(sm.add_constant(np.log10(vel_where_thick_bad)))
# set err to thickness where fit
th['fit_err'] = th['err']
th.loc[th['bad'] == True, 'fit_err'] = th.loc[th['bad'] == True, 'fit'] /2.


fits.summary()


D0 = (vel).apply(lambda c: c * (200 * th['thick_adj_300'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D1 = (vel).apply(lambda c: c * (200 * th['fit'] * meta['err_2D'].values), axis=0) * 917 / 1E12
D0 = D0.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
D1 = D1.sum(axis='rows').resample('1D').mean().interpolate(method='time', limit_area='inside').resample('A').mean()
pd.concat([D0,D1, D1-D0], axis='columns', keys=['300','fit','diff'])

#+END_SRC

#+RESULTS: adjust_thickness_fit
:results:
                   300         fit      diff
2014-12-31  453.082411  455.289325  2.206914
2015-12-31  461.205239  463.346238  2.140999
2016-12-31  464.891021  467.065868  2.174847
2017-12-31  479.092033  481.519541  2.427507
2018-12-31  477.387607  479.841739  2.454132
2019-12-31  480.346605  482.969111  2.622506
2020-12-31  487.542544  490.261351  2.718807
2021-12-31  489.760421  492.318304  2.557883
2022-12-31  459.334502  461.727055  2.392552
2023-12-31  452.450512  454.749717  2.299205
:end:

**** Table of thickness adjustments
:PROPERTIES:
:ID:       62f5d28c-c704-422d-9e9b-c0771d5b86ee
:END:

#+BEGIN_SRC python :exports none :results raw drawer :display text/org
th[['thick','thick_adj_300','thick_adj_400','fit']].describe()
#+END_SRC

#+RESULTS:
:results:
             thick  thick_adj_300  thick_adj_400          fit
count  7102.000000    7102.000000    7102.000000  7102.000000
mean    509.435354     509.764437     521.827324   515.744227
std     267.498743     266.878764     252.926260   260.992992
min     -66.107367      20.300162      50.147858    20.300162
25%     330.821427     330.821427     361.642470   344.016950
50%     509.002046     509.002046     509.002046   511.645001
75%     676.850565     676.850565     676.850565   676.959312
max    1638.324940    1638.324940    1638.324940  1638.324940
:end:


**** Baseline discharge values for various thickness adjustments
Here we calculate:
+ D_baseline_th_noadj :: Discharge with no thickness adjustment
+ D_baseline_th_300 :: The baseline discharge
+ D_baseline_th_400 :: The discharge assuming the aggressive thickness adjustment
+ D_baseline_th_fit :: The discharge assuming the fitted thickness adjustment
+ D_baseline :: The baseline discharge - picked from our favorite of the above. TBD

#+NAME: discharge_th
#+BEGIN_SRC python :exports none :results raw drawer
D_th = pd.DataFrame(index=th.index,
                    columns=['NoAdj','NoAdj_err','300','300_err','400','400_err','fit','fit_err'])

# + D_baseline_th_noadj :: Discharge with no thickness adjustment
D_th['NoAdj'] = vel_baseline.apply(lambda c: c * (th['thick'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

# should match HeatMap
D_th['NoMillan'] = vel_baseline.apply(lambda c: c * ((th['surface@BedMachine']-th['bed@BedMachine']).values * 200), axis=0) * 917 / 1E12

# D_baseline_th_noadj_err ::
D_th['NoAdj_err'] = vel_baseline.apply(lambda c: c * (th['err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['300'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['300_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_300_err'].values  * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['400'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['400_err'] = vel_baseline.apply(lambda c: c * (th['thick_adj_400_err'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th['fit'] = vel_baseline.apply(lambda c: c * (th['fit'].values * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12
D_th['fit_err'] = vel_baseline.apply(lambda c: c * (th['fit_err'].values* 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

D_th.sum(axis='rows')
#+END_SRC

#+RESULTS: discharge_th
:results:
NoAdj        471.948061
NoAdj_err     37.887958
300          472.091393
300_err       38.495825
400          477.136814
400_err       40.091192
fit          474.933976
fit_err       39.134462
NoMillan     475.807067
dtype: float64
:end:


**** Temporal changes in thickness
+ + Each pixel has DEM at YYYY. Assume 08-01 (DOY ~213)
+ Assume DEM_2020 is baseline 
+ Linear interpolate between annual values
+ Take derivative to get dh/dt
#+BEGIN_SRC python :exports none :results raw drawer
dem_ts = dem.copy(deep=True)
dem_ts.columns = [str(y)+'-08-01' for y in dem_ts.columns]
dem_ts.columns = dem_ts.columns.astype(str).astype('datetime64[ns]')

# extend to first and last velocity timestamp
dem_ts[vel.columns.min()] = dem_ts[dem_ts.columns.min()]
dem_ts[vel.columns.max()] = dem_ts[dem_ts.columns.max()]
# re-sort so column are still in temporal order
dem_ts = dem_ts.reindex(sorted(dem_ts.columns), axis='columns')
# resample to daily.
dem_ts = dem_ts.T.resample('1D').interpolate().T
dem_ts = dem_ts[vel.columns] # resample back to observed times
# Above gives us DEM time series at each gate pixel

dem_ts.to_csv('tmp/dem_ts.csv', index = True)
# subtract thickness from each pixel at each time
th_ts = dem_ts.apply(lambda x: x - th['bed@BedMachine'])

# Re-adjust th_ts where thickness < 20 m.
bad = th_ts.min(axis=1) < 20 # Pixels with bad thickness somewhere in the time series
for px in bad[bad == True].index:
    th_ts.loc[px] = fits.predict(np.log10([1,vel_baseline.iloc[px].values[0]]))
#+END_SRC

#+RESULTS:
:results:
:end:


*** Discharge

And more importantly and long-term, we calculate the following time series discharge products, using our preferred method (fill w/ 300 m):
+ D :: Discharge at gate scale
+ D_err :: The discharge error at gate scale
+ D_fill :: The fill percentage for each gate at each point in time
+ D_sector :: Same, but at Mouginot 2019 sector scale
+ D_sector_err ::
+ D_sector_fill :: 
+ D_region :: Same, but at Mouginot 2019 region scale
+ D_region_err ::
+ D_region_fill ::
+ D_all :: Same, but all GIS
+ D_all_err ::
+ D_all_fill ::

#+BEGIN_SRC python :display text/plain :session test :tangle no
import pandas as pd
import numpy as np
filled_D = pd.DataFrame(index=['A','B'], columns=['t1','t3','t4'], data=[[8,9,7],[4,2,1]])
fill = filled_D/filled_D
fill.loc['B','t3'] = np.nan

no_filled_D = filled_D * fill
# filled_weighted_D = filled_D / filled_D.sum()
no_filled_weighted_D = no_filled_D / filled_D.sum()

r = ((filled_D*fill)/filled_D.sum()).sum()
r.round(2)                        
#+END_SRC

#+RESULTS:
: t1    1.00
: t3    0.82
: t4    1.00
: dtype: float64

#+NAME: discharge
#+BEGIN_SRC python :exports none :results raw drawer
# D :: Discharge at pixel scale
# D_err :: The discharge error at pixel scale
# D_fill :: The fill percentage for each pixel at each point in time
D = (vel*th_ts).apply(lambda c: c * (200 * meta['err_2D'].values), axis=0) * 917 / 1E12
# SHL: I will set fill to 1 - because it is not calculated as in the main code 
fill = D/D
# Don't adjust thickness over time
# D = (vel).apply(lambda c: c * (200 * meta['err_2D'].values * th['thick'].values), axis=0) * 917 / 1E12

D_err = vel.apply(lambda c: c * (th['fit_err'] * 200 * meta['err_2D'].values), axis=0) * 917 / 1E12

[DD,DD_err] = [_.copy() for _ in [D,D_err]]

DD[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]
DD_err[['gates','sectors','regions','ones','name']] = meta[['gates','sectors','regions','ones','name']]

# D_gate :: Same, but at the gate scale
# D_gate_err ::
# D_gate_fill ::
D_gates = DD.groupby('gates').sum().drop(['ones','sectors','regions','name'], axis=1)
D_gates_err = DD_err.groupby('gates').sum().drop(['ones','sectors','regions','name'], axis=1)
D_gates_fill_weight = pd.DataFrame().reindex_like(D_gates)
for g in D_gates.index:
    g_idx = (DD['gates'] == g)
    D_gates_fill_weight.loc[g] = ((D[g_idx]*fill[g_idx])/D[g_idx].sum()).sum()

D_gates.columns = D_gates.columns.astype(str).astype('datetime64[ns]')

D_gates_err.columns = D_gates_err.columns.astype(str).astype('datetime64[ns]')
D_gates_fill_weight.columns = D_gates_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_gates_fill_weight.clip(lower=0, upper=1, inplace=True)



# D_sector :: Same, but at Mouginot sector scale
# D_sector_err ::
# D_sector_fill ::
D_sectors = DD.groupby('sectors').sum().drop(['ones','gates','regions','name'], axis=1)
D_sectors_err = DD_err.groupby('sectors').sum().drop(['ones','gates','regions','name'], axis=1)
D_sectors_fill_weight = pd.DataFrame().reindex_like(D_sectors)
for s in D_sectors.index:
    s_idx = (DD['sectors'] == s)
    D_sectors_fill_weight.loc[s] = ((D[s_idx]*fill[s_idx])/D[s_idx].sum()).sum()

# no gates is 1.4
D_sectors.index = [1.1, 1.2, 1.3, 2.1, 2.2, 3.1, 3.2, 3.3, 4.1, 4.2, 4.3, 5.0, 6.1, 6.2, 7.1, 7.2, 8.1, 8.2]
D_sectors_err.index = D_sectors.index
D_sectors_fill_weight.index = D_sectors.index

D_sectors.columns = D_sectors.columns.astype(str).astype('datetime64[ns]')
D_sectors_err.columns = D_sectors_err.columns.astype(str).astype('datetime64[ns]')
D_sectors_fill_weight.columns = D_sectors_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_sectors_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_region :: Same, but at Mouginot region scale
# D_region_err ::
# D_region_fill ::
D_regions = DD.groupby('regions').sum().drop(['ones','sectors','gates','name'], axis=1)
D_regions_err = DD_err.groupby('regions').sum().drop(['ones','sectors','gates','name'], axis=1)
D_regions_fill_weight = pd.DataFrame().reindex_like(D_regions)
for r in D_regions.index:
    r_idx = DD['regions'] == r
    D_regions_fill_weight.loc[r] = ((D[r_idx]*fill[r_idx])/D[r_idx].sum()).sum()
    
    # # or, broken apart into simple steps.
    # # Whether any given pixel is filled (1) or not (0).
    # r_fill = fill[DD['regions'] == r].fillna(value=0)
    # # Discharge for each pixel in this region, using filling
    # r_filled_D = DD[DD['regions'] == r].drop(['sectors','regions','ones'], axis=1)
    # # weighted filling for this region
    # r_fill_weight = ((r_filled_D*r_fill)/r_filled_D.sum()).sum()
    # D_regions_fill_weight.loc[r] = r_fill_weight
    
D_regions.columns = D_regions.columns.astype(str).astype('datetime64[ns]')
D_regions_err.columns = D_regions_err.columns.astype(str).astype('datetime64[ns]')
D_regions_fill_weight.columns = D_regions_fill_weight.columns.astype(str).astype('datetime64[ns]')
D_regions_fill_weight.clip(lower=0, upper=1, inplace=True)


# D_all :: Same, but all GIS
# D_all_err ::
# D_all_fill ::
D_all = DD.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_err = DD_err.drop(['regions','sectors','ones','name','gates'], axis=1).sum()
D_all_fill_weight = pd.Series().reindex_like(D_all)
for c in D.columns:
    D_all_fill_weight.loc[c] = (fill[c] * (D[c] / D[c].sum())).sum()
#+END_SRC

#+RESULTS: discharge
:results:
None
:end:



*** SAVE & RESTORE STATE

#+BEGIN_SRC python :results raw drawer :tangle no
%store D
%store D_err
%store fill
%store D_gates
%store D_gates_err
%store D_gates_fill_weight
%store D_sectors
%store D_sectors_err
%store D_sectors_fill_weight
%store D_regions
%store D_regions_err
%store D_regions_fill_weight
%store D_all
%store D_all_err
%store D_all_fill_weight
%store meta
#+END_SRC

#+RESULTS:
:results:
# Out[796]:
# output
Stored 'D' (DataFrame)
Stored 'D_err' (DataFrame)
Stored 'fill' (DataFrame)
Stored 'D_gates' (DataFrame)
Stored 'D_gates_err' (DataFrame)
Stored 'D_gates_fill_weight' (DataFrame)
Stored 'D_sectors' (DataFrame)
Stored 'D_sectors_err' (DataFrame)
Stored 'D_sectors_fill_weight' (DataFrame)
Stored 'D_regions' (DataFrame)
Stored 'D_regions_err' (DataFrame)
Stored 'D_regions_fill_weight' (DataFrame)
Stored 'D_all' (Series)
Stored 'D_all_err' (Series)
Stored 'D_all_fill_weight' (Series)
Stored 'meta' (DataFrame)

:end:

#+BEGIN_SRC python :results raw drawer :tangle no
%store -r

D = D.T['2000':].T
D_err = D_err.T['2000':].T
fill = fill.T['2000':].T
D_gates = D_gates.T['2000':].T
D_gates_err = D_gates_err.T['2000':].T
D_gates_fill_weight = D_gates_fill_weight.T['2000':].T
D_sectors = D_sectors.T['2000':].T
D_sectors_err = D_sectors_err.T['2000':].T
D_sectors_fill_weight = D_sectors_fill_weight.T['2000':].T
D_regions = D_regions.T['2000':].T
D_regions_err = D_regions_err.T['2000':].T
D_regions_fill_weight = D_regions_fill_weight.T['2000':].T
D_all = D_all.T['2000':].T
D_all_err = D_all_err.T['2000':].T
D_all_fill_weight = D_all_fill_weight.T['2000':].T
#+END_SRC

#+RESULTS:
:results:
# Out[278]:
:end:


*** Export Data
**** Crop time series
#+BEGIN_SRC python :exports both :results raw drawer

STARTDATE=pd.to_datetime('2014-10-01')
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T
D_gates = D_gates.T[STARTDATE:].T
D_gates_err = D_gates_err.T[STARTDATE:].T
D_gates_fill_weight = D_gates_fill_weight.T[STARTDATE:].T
D_sectors = D_sectors.T[STARTDATE:].T
D_sectors_err = D_sectors_err.T[STARTDATE:].T
D_sectors_fill_weight = D_sectors_fill_weight.T[STARTDATE:].T
D_regions = D_regions.T[STARTDATE:].T
D_regions_err = D_regions_err.T[STARTDATE:].T
D_regions_fill_weight = D_regions_fill_weight.T[STARTDATE:].T
D_all = D_all.T[STARTDATE:].T
D_all_err = D_all_err.T[STARTDATE:].T
D_all_fill_weight = D_all_fill_weight.T[STARTDATE:].T

#+END_SRC

#+RESULTS:
:results:
None
:end:

**** README

#+BEGIN_SRC org :tangle ./out/README.txt :mkdirp ./out
README for "Greenland Ice Sheet solid ice discharge from 1986 through 2018"

Paper Citation: TODO

Original Paper: doi:10.5194/essd-11-769-2019

Data Citation: TODO

Original Data Citations: doi:10.22008/promice/data/ice_discharge

Source: https://github.com/mankoff/ice_discharge

,* Usage instructions:

When using any of the following data, you are required to cite the paper and the data set.

,* Data Descriptions

Data sets released as part of this work include:
+ Discharge data
+ Gates
+ Surface Elevation Change
+ Code

Each are described briefly below.

,** Discharge Data

This data set is made up of the following files

| Filename            | Description                                           |
|---------------------+-------------------------------------------------------|
| GIS_D.csv           | Greenland Ice Sheet cumulative discharge by timestamp |
| GIS_err.csv         | Errors for GIS_D.csv                                  |
| GIS_coverage.csv    | Coverage for GIS_D.csv                                |
| region_D.csv        | Regional discharge                                    |
| region_err.csv      | Errors for region_D.csv                               |
| region_coverage.csv | Coverage for region_D.csv                             |
| sector_D.csv        | Sector discharge                                      |
| sector_err.csv      | Errors for sector_D.csv                               |
| sector_coverage.csv | Coverage for sector_D.csv                             |
| gate_D.csv          | Gate discharge                                        |
| gate_err.csv        | Errors for gate_D.csv                                 |
| gate_coverage.csv   | Coverage for gate_D.csv                               |
|---------------------+-------------------------------------------------------|
| gate_meta.csv       | Metadata for each gate                                |


D and err data have units [Gt yr-1].
Coverage is in range [0, 1]

,** Gates

| Filename   | Description                                   |
|------------+-----------------------------------------------|
| gates.kml  | KML file of gate location and metadata        |
| gates.gpkg | GeoPackage file of gate location and metadata |

,** Surface Elevation Change

The "surface_elevation_change" file set contains the surface elevation change data used in this work (DOI 10.22008/promice/data/DTU/surface_elevation_change/v1.0.0)

,** Code

The "code" file set (DOI 10.22008/promice/data/ice_discharge/code/v0.0.1) contains the digital workbook that produced the data, the ESSD document text and figures, this README, and everything else associated with this work.
#+END_SRC

**** Gates
***** D, err, coverage
#+BEGIN_SRC python :exports both :results raw drawer
D_gatesT = D_gates.T
D_gates_errT = D_gates_err.T
D_gates_fill_weightT = D_gates_fill_weight.T

D_gatesT.index.name = "Date"
D_gates_errT.index.name = "Date"
D_gates_fill_weightT.index.name = "Date"

D_gatesT = D_gatesT.replace(to_replace=0, value=np.nan).dropna(axis='rows', how='all')
D_gates_errT = D_gates_errT.loc[D_gatesT.index]
D_gates_fill_weightT = D_gates_fill_weightT.loc[D_gatesT.index]

D_gatesT.to_csv('./out/gate_D.csv')
D_gates_errT.to_csv('./out/gate_err.csv')
D_gates_fill_weightT.to_csv('./out/gate_coverage.csv')
#+END_SRC

#+RESULTS:

**** Sectors
#+BEGIN_SRC python :exports both :results raw drawer :display text/org
# meta_sector = pd.DataFrame(index=meta.groupby('sectors').first().index)
# meta_sector['mean x'] = meta.groupby('sectors').mean()['x'].round().astype(np.int)
# meta_sector['mean y'] = meta.groupby('sectors').mean()['y'].round().astype(np.int)
# meta_sector['n gates'] = meta.groupby('sectors').count()['gates'].round().astype(np.int)
# meta_sector['region'] = meta.groupby('sectors').first()['regions']

D_sectorsT = D_sectors.T
D_sectors_errT = D_sectors_err.T
D_sectors_fill_weightT = D_sectors_fill_weight.T

D_sectorsT.index.name = "Date"
D_sectors_errT.index.name = "Date"
D_sectors_fill_weightT.index.name = "Date"

D_sectorsT = D_sectorsT.replace(to_replace=0, value=np.nan).dropna(axis='rows', how='all')
D_sectors_errT = D_sectors_errT.loc[D_sectorsT.index]
D_sectors_fill_weightT = D_sectors_fill_weightT.loc[D_sectorsT.index]

# meta_sector.to_csv('./out/sector_meta.csv')
D_sectorsT.to_csv('./out/sector_D.csv')
D_sectors_errT.to_csv('./out/sector_err.csv')
D_sectors_fill_weightT.to_csv('./out/sector_coverage.csv')

# meta_sector.head(10)
#+END_SRC

#+RESULTS:

**** Regions
#+BEGIN_SRC python :exports both :results raw drawer :display text/org
# meta_region = pd.DataFrame(index=meta.groupby('regions').first().index)
# meta_region['n gates'] = meta.groupby('regions').count()['gates'].round().astype(np.int)

D_regionsT = D_regions.T
D_regions_errT = D_regions_err.T
D_regions_fill_weightT = D_regions_fill_weight.T
D_regionsT.index.name = "Date"
D_regions_errT.index.name = "Date"
D_regions_fill_weightT.index.name = "Date"

D_regionsT = D_regionsT.replace(to_replace=0, value=np.nan).dropna(axis='rows', how='all')
D_regions_errT = D_regions_errT.loc[D_regionsT.index]
D_regions_fill_weightT = D_regions_fill_weightT.loc[D_regionsT.index]

# meta_region.to_csv('./out/region_meta.csv')
D_regionsT.to_csv('./out/region_D.csv')
D_regions_errT.to_csv('./out/region_err.csv')
D_regions_fill_weightT.to_csv('./out/region_coverage.csv')

# meta_region.head(10)
#+END_SRC

#+RESULTS:


**** GIS
#+BEGIN_SRC python :exports both :results raw drawer
D_all.index.name = "Date"
D_all_err.index.name = "Date"
D_all_fill_weight.index.name = "Date"

D_all = D_all.replace(to_replace=0, value=np.nan).dropna(axis='rows', how='all')
D_all_err = D_all_err[D_all.index]
D_all_fill_weight = D_all_fill_weight[D_all.index]

D_all.to_csv('./out/GIS_D.csv', float_format='%.5f', header=["Discharge [Gt yr-1]"])
D_all_err.to_csv('./out/GIS_err.csv', float_format='%.5f', header=["Discharge Error [Gt yr-1]"])
D_all_fill_weight.to_csv('./out/GIS_coverage.csv', float_format='%.5f', header=["Coverage [unit]"])
#+END_SRC

#+RESULTS:

**** Gates
#+BEGIN_SRC bash :results verbatim :tangle gate_export.sh
<<MSGS_pretty_print>>
<<GRASS_config>>
g.mapset gates_150_10000

v.out.ogr input=gates_final output=./out/gates.kml format=KML --o
v.out.ogr input=gates_final output=./out/gates.gpkg format=GPKG --o
#+END_SRC
#+RESULTS:

**** Elevation change

Done manually. See DOI

**** TODO Code

Make sure this Org file is tidy enough...

**** TODO Distribute
#+BEGIN_SRC bash :results verbatim :tangle no
(cd out; zip -e /media/kdm/promicedata/ice_discharge/gates/gates.zip gates*)
(cd out; zip -e /media/kdm/promicedata/ice_discharge/d/D.zip D*csv)
cp ./out/README.txt /media/kdm/promicedata/ice_discharge/

zip -e /media/kdm/promicedata/ice_discharge/code/mankoff_et_al.zip ice_discharge.org

cp ${DATADIR}/Khan_2016/dhdt_1995-2015_GrIS.txt /media/kdm/promicedata/ice_discharge/surface_elevation_change

#+END_SRC
#+RESULTS:


** Figures
:PROPERTIES:
:header-args:python+: :tangle figures.py
:header-args:python+: :session sob_figures
:END:
*** Discharge Time Series - GIS
#+NAME: fig:discharge_ts
#+BEGIN_SRC python :results raw drawer :display text/org
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import matplotlib.pyplot as plt
import datetime as dt

# plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()

ax_D = fig.add_subplot(111)

adj(ax_D, ['left','bottom'])

D = pd.read_csv("./out/GIS_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/GIS_err.csv", index_col=0, parse_dates=True)
coverage = pd.read_csv("./out/GIS_coverage.csv", index_col=0, parse_dates=True)

ROOT="/data/dataverse_data/"
D_M2019 = pd.read_csv(ROOT+"/GIS_D.csv", index_col=0, parse_dates=True)
err_M2019 = pd.read_csv(ROOT+"/GIS_err.csv", index_col=0, parse_dates=True)

D_M2019 = D_M2019[(D_M2019.index > D.index[0]) & (D_M2019.index <= D.index[-1])]
err_M2019 = err_M2019[(err_M2019.index > err.index[0]) & (err_M2019.index <= err.index[-1])]

# | Color       |   R |   G |   B | hex     |
# |-------------+-----+-----+-----+---------|
# | light blue  | 166 | 206 | 227 | #a6cee3 |
# | dark blue   |  31 | 120 | 180 | #1f78b4 |
# | light green | 178 | 223 | 138 | #b2df8a |
# | dark green  |  51 | 160 |  44 | #33a02c |
# | pink        | 251 | 154 | 153 | #fb9a99 |
# | red         | 227 |  26 |  28 | #e31a1c |
# | pale orange | 253 | 191 | 111 | #fdbf6f |
# | orange      | 255 | 127 |   0 | #ff7f00 |
C1="#e31a1c" # red
C2="#1f78b4" # dark blue

MS=4

D_M2019.plot(ax=ax_D, marker='.', color=C2, label='')
D.plot(ax=ax_D, drawstyle='steps', color=C1, label='')

ax_D.fill_between(err.index, 
                  (D.values-err.values).flatten(), 
                  (D.values+err.values).flatten(), 
                  color=C1, alpha=0.25, label='')

ax_D.fill_between(err_M2019.index, 
                  (D_M2019.values-err_M2019.values).flatten(), 
                  (D_M2019.values+err_M2019.values).flatten(), 
                  color=C2, alpha=0.25, label='')

ax_D.legend(["Mankoff (2019)", "GEUS CCI"], framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')

import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())
ax_D.minorticks_off()
# ax_D.xaxis.set_tick_params(rotation=-90) #, ha="left", rotation_mode="anchor")
# for tick in ax_D.xaxis.get_majorticklabels():
#     tick.set_horizontalalignment("left")

plt.savefig('./figs/discharge_ts.png', transparent=False, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/discharge_ts.pdf', box_inches='tight', dpi=300)

# disp = pd.DataFrame(data = {'D':D_day_year.values.flatten(), 'err':err_day_year.values.flatten()},
#                     index = D_day_year.index.year)
# disp.index.name = 'Year'
# disp
#+END_SRC

#+RESULTS: fig:discharge_ts
:results:
None
:end:

*** COMMENT Discharge Time Series - Regions
#+NAME: fig:discharge_ts_regions
#+BEGIN_SRC python :results raw drawer 
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import datetime as dt


# plt.close(1)

fig = plt.figure(1, figsize=(9,7)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,6], hspace=0.1) # h, w

ax_D = fig.add_subplot(111)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])

D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

ROOT="/home/kdm/projects/ice_discharge/out"
D_M2019 = pd.read_csv(ROOT+"/region_D.csv", index_col=0, parse_dates=True)
err_M2019 = pd.read_csv(ROOT+"/region_err.csv", index_col=0, parse_dates=True)

D_M2019 = D_M2019[(D_M2019.index > D.index[0]) & (D_M2019.index <= D.index[-1])]
err_M2019 = err_M2019[(err_M2019.index > err.index[0]) & (err_M2019.index <= err.index[-1])]

D = D.loc[D.index[:-3]]
err = err.loc[err.index[:-3]]

# | Color       |   R |   G |   B | hex     |
# |-------------+-----+-----+-----+---------|
# | light blue  | 166 | 206 | 227 | #a6cee3 |
# | dark blue   |  31 | 120 | 180 | #1f78b4 |
# | light green | 178 | 223 | 138 | #b2df8a |
# | dark green  |  51 | 160 |  44 | #33a02c |
# | pink        | 251 | 154 | 153 | #fb9a99 |
# | red         | 227 |  26 |  28 | #e31a1c |
# | pale orange | 253 | 191 | 111 | #fdbf6f |
# | orange      | 255 | 127 |   0 | #ff7f00 |
C1="#e31a1c" # red
C2="#1f78b4" # dark blue



MS=4
Z=99
for r in D.columns:
    e = ax_D.errorbar(D[r].index, D[r].values, fmt='o', mfc='none', ms=MS)
    C = e.lines[0].get_color()
    D[r].plot(drawstyle='steps', linewidth=2, ax=ax_D,
              color=C,
              # color='orange'
              alpha=0.75, zorder=Z)
    ax_D.fill_between(D.index, 
                      (D[r]-err[r]), 
                      (D[r]+err[r]),
                      color=C,
                      #hatch="\\",
                      alpha=0.25)

    ax_D.fill_between(D_M2019.index,
                      (D_M2019[r]-err_M2019[r]), 
                      (D_M2019[r]+err_M2019[r]),
                      color=C,
                      # hatch="/",
                      alpha=0.1)

    tx = D.iloc[-1].name + dt.timedelta(days=50)
    ty = D.iloc[-1][r]
    if r in ['CE', 'SW']: ty=ty-4
    if r == 'NE': ty=ty+4
    if r == 'NO': ty=ty-2
    ax_D.text(tx, ty, r, verticalalignment='center')

ax_coverage.set_ylabel('Coverage [%]')
ax_coverage.set_ylim([0,100])
    
import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())

ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
# ax_D.set_yscale('log')

# ax_D.xaxis.set_tick_params(rotation=-90)
# for tick in ax_D.xaxis.get_majorticklabels():
#     tick.set_horizontalalignment("left")

plt.savefig('./figs/discharge_ts_regions.png', transparent=False, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/discharge_ts_regions.pdf', transparent=True, bbox_inches='tight', dpi=300)

# Err_pct = (err_day_year.values/D_day_year.values*100).round().astype(np.int).astype(np.str)
# tbl = (D_day_year.round().astype(np.int).astype(np.str) + ' ('+Err_pct+')')
# tbl.index = tbl.index.year.astype(np.str)
# tbl.columns = [_ + ' (Err %)' for _ in tbl.columns]
# tbl
#+END_SRC

#+RESULTS: fig:discharge_ts_regions
:results:
None
:end:


*** Discharge Time Series - Sectors
#+BEGIN_SRC python :results raw drawer :display text/org :kernel sci :session CCI
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# plt.close(1)

fig = plt.figure(1, figsize=(9,5)) # w,h
fig.clf()
# fig.set_tight_layout(True)


ax_D = fig.add_subplot(111)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])

D = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)

D[['8.1','7.1']].plot(ax=ax_D, linewidth=3)
ax_D.fill_between(D.index,
                  D['8.1']-err['8.1'],
                  D['8.1']+err['8.1'], alpha=0.25)

ax_D.fill_between(D.index,
                  D['7.1']-err['7.1'],
                  D['7.1']+err['7.1'], alpha=0.25)


ax_D.set_ylim([0,120])
ax_D.set_ylabel("Discharge [Gt yr$^{-1}$]")
ax_D.set_xlabel("Date")

plt.savefig('./figs/discharge_ts_sectors.png', transparent=False, bbox_inches='tight', dpi=300)


fig1 = plt.figure(1, figsize=(9,5)) # w,h
fig1.clf()
ax_D1 = fig.add_subplot(111)

from adjust_spines import adjust_spines as adj
adj(ax_D1, ['left','bottom'])

D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

D[['CE','CW','NE','NO','NW','SE','SW']].plot(ax=ax_D1, linewidth=3)

ax_D1.fill_between(D.index,
                  D['CE']-err['CE'],
                  D['CE']+err['CE'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['CW']-err['CW'],
                  D['CW']+err['CW'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['NE']-err['NE'],
                  D['NE']+err['NE'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['NO']-err['NO'],
                  D['NO']+err['NO'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['NW']-err['NW'],
                  D['NW']+err['NW'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['SE']-err['SE'],
                  D['SE']+err['SE'], alpha=0.25)

ax_D1.fill_between(D.index,
                  D['SW']-err['SW'],
                  D['SW']+err['SW'], alpha=0.25)

ax_D1.legend(loc=3)
ax_D1.set_ylim([0,170])
ax_D1.set_ylabel("Discharge [Gt yr$^{-1}$]")
ax_D1.set_xlabel("Date")


plt.savefig('./figs/discharge_ts_regions.png', transparent=False, bbox_inches='tight', dpi=300)
# # largest average for last year
# D_sort = D.resample('Y', axis='rows')\
#           .mean()\
#           .iloc[-1]\
#           .sort_values(ascending=False)

# LABELS={}
# # for k in D_sort.head(8).index: LABELS[k] = k
# # Use the last       ^ glaciers

# # Make legend pretty
# LABELS['JAKOBSHAVN_ISBRAE'] = 'Sermeq Kujalleq (Jakobshavn Isbræ)'
# LABELS['HELHEIMGLETSCHER'] = 'Helheim Gletsjer'
# LABELS['KANGERLUSSUAQ'] = 'Kangerlussuaq Gletsjer'
# LABELS['KOGE_BUGT_C'] = '(Køge Bugt C)'
# LABELS['ZACHARIAE_ISSTROM'] = 'Zachariae Isstrøm'
# LABELS['RINK_ISBRAE'] = 'Kangilliup Sermia (Rink Isbræ)'
# LABELS['NIOGHALVFJERDSFJORDEN'] = '(Nioghalvfjerdsbrae)'
# LABELS['PETERMANN_GLETSCHER'] ='Petermann Gletsjer'

# SYMBOLS={}
# SYMBOLS['JAKOBSHAVN_ISBRAE'] = 'o'
# SYMBOLS['HELHEIMGLETSCHER'] = 's'
# SYMBOLS['KANGERLUSSUAQ'] = 'v'
# SYMBOLS['KOGE_BUGT_C'] = '^'
# SYMBOLS['NIOGHALVFJERDSFJORDEN'] = 'v'
# SYMBOLS['RINK_ISBRAE'] = 's'
# SYMBOLS['ZACHARIAE_ISSTROM'] = 'o'
# SYMBOLS['PETERMANN_GLETSCHER'] ='^'

# MS=4
# Z=99
# for g in LABELS.keys(): # for each glacier
#     e = ax_D.errorbar(D.loc[:,g].index,
#                       D.loc[:,g].values,
#                       label=LABELS[g],
#                       fmt=SYMBOLS[g],
#                       mfc='none',
#                       ms=MS)
#     C = e.lines[0].get_color()
#     D_day_year.loc[:,g].plot(drawstyle='steps', linewidth=2,
#                              label='',
#                              ax=ax_D,
#                              alpha=0.75, color=C, zorder=Z)

#     for i,idx in enumerate(D.loc[:,g].index):
#         ax_D.errorbar(D.loc[:,g].index[i],
#                       D.loc[:,g].values[i],
#                       yerr=err.loc[:,g].values[i],
#                       alpha=coverage.loc[:,g].values[i],
#                       label='',
#                       ecolor='grey',
#                       mfc=C, mec=C,
#                       marker='o', ms=MS)


#     if g in ['NIOGHALVFJERDSFJORDEN', 'KANGERLUSSUAQ']: #, 'JAKOBSHAVN_ISBRAE']:
#         ax_coverage.plot(D.loc[:,g].index,
#                          coverage.loc[:,g].values*100,
#                          drawstyle='steps',
#                          # alpha=0.5,
#                          color=C)

# # yl = ax_D.get_ylim()

# ax_D.legend(fontsize=8, ncol=2, loc=(0.0, 0.82), fancybox=False, frameon=False)
# ax_D.set_xlabel('Time [Years]')
# ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')

# import matplotlib.dates as mdates
# ax_D.xaxis.set_major_locator(mdates.YearLocator())
# ax_D.xaxis.set_tick_params(rotation=-90)
# for tick in ax_D.xaxis.get_majorticklabels():
#     tick.set_horizontalalignment("left")

# ax_coverage.set_ylabel('Coverage [%]')
# ax_coverage.set_ylim([0,100])


#plt.savefig('./figs/discharge_ts_topfew.svg', transparent=True, bbox_inches='tight', dpi=300)

# plt.savefig('./figs/discharge_ts_topfew.pdf', transparent=True, bbox_inches='tight', dpi=300)

# Err_pct = (err_day_year / D_day_year*100).round().astype(np.int).astype(np.str)
# Err_pct = Err_pct[list(LABELS.keys())]
# tbl = D_day_year[list(LABELS.keys())].round().astype(np.int).astype(np.str) + ' (' + Err_pct+')'
# tbl.index = tbl.index.year.astype(np.str)
# tbl.columns = [_ + ' (%)' for _ in tbl.columns]
# tbl
#+END_SRC

#+RESULTS:
:results:
None
:end:


*** This v. Mankoff (2019)
#+NAME: name
#+BEGIN_SRC python :session compare :exports results :results raw drawer
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

CCI = pd.read_csv("./out/GIS_D.csv", index_col=0, parse_dates=True)\
        .rename({'Discharge [Gt yr-1]':'CCI'}, axis='columns')
ID = pd.read_csv("/data/dataverse_data/GIS_D.csv", index_col=0, parse_dates=True)\
       .rename({'Discharge [Gt yr-1]':'Mankoff (2019)'}, axis='columns')

df = pd.merge(CCI,ID,how='outer', left_index=True, right_index=True).dropna()
# df['diff'] = df['Mankoff (2019)'] - df['CCI']
df.plot()

plt.savefig("./figs/this_v_M2019.png", dpi=300)
#+END_SRC

#+RESULTS: name
:results:
:end:

** Distribution for CCI

Example: http://products.esa-icesheets-cci.org/products/details/greenland_iv_50m_s2_20170501_20170914_petermann_v1_1.zip/

It is the optical IV generated by S&T. I believe it follows all the
guidelines listed below.

*GUIDELINES*

1. The *name of the zip file and the name of the top-level folder inside
the zip* file should follow the logic of old products. Please download
the previous version of your product from the CCI website to understand
what this means. For new products, try to follow the structure of the
filename of the example provided in this email.

2. A *quicklook image in .png or .jpg format*. Size can *not exceed*
 1200x1200. This should be contained in the above zip file.

3. A short text file called *description.txt with a brief description of
the product*. The description *can not exceed 100 characters. *This
should also be contained in the above zip file.

4. *A SINGLE text file called README or comments.txt*,  with comments on
the preparation and content of the product . You are encouraged to include
paragraphs "Citable as:" and "References:" if this applies to your
product. This should also be contained in the above zip file.

5. *File permissions.* Inside the zip, files should be 644 (writable to
the owner, readable to everyone, not executable, represented as
"-rw-r--r--"), and directory permissions should be 755 (writable to the
owner, readable and executable to everyone, represented as "drwxr-xr-x").
On a Unix/MacOS/Linux system you list permissions with the command "ls -l",
and correct them with "chmod 644 {filename}" or "chmod 755 {directory}

6. There should not be any spare or hidden files or directories included
in the zip (like e.g. the hidden __MACOS folder you often get when creating
a zipped folder on MacOS).

#+NAME: dist_for_CCI
#+BEGIN_SRC bash :results verbatim
mkdir -p MFID
#+END_SRC

#+RESULTS: dist_for_CCI

#+BEGIN_SRC org :tangle ./MFID/description.txt :mkdirp ./MFID :tangle-mode (identity #o644)
Mass flow rate ice discharge (MFID) for Greenland from CCI IV, CCI SEC, and BedMachine
#+END_SRC

#+BEGIN_SRC org :tangle ./MFID/README.txt :mkdirp ./MFID :tangle-mode (identity #o644)
Mass flow rate ice discharge (MFID) for Greenland ice sheet sectors.

This data set is part of the ESA Greenland Ice sheet CCI project. 
It provides the following CSV files.
1. Mass flow rate ice discharge. Units are Gt yr^{-1}.
2. Mass flow rate ice discharge uncertainty. Units are Gt yr^{-1}.
3. Coverage for each sector at each timestamp. Unitless [0 to 1].

Ice discharge is calculated from the CCI Ice Velocity (IV) product, the CCI Surface Elevation Change (SEC) product (where it overlaps with the ice discharge gates), and ice thickness from BedMachine. Ice discharge gates are placed 10 km upstream from all marine terminating glacier termini that have baseline velocities of more than 150 m/yr. Results are summed by Zwally et al. (2012) sectors.

The methods, including description of "coverage", are described in Mankoff /et al/. (2020; DOI: 10.5194/essd-12-1367-2020)
#+END_SRC

#+BEGIN_SRC python :session MFID :exports results :results raw drawer :kernel sci
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt

from matplotlib import rc
rc('font', size=12)
rc('text', usetex=False)
# matplotlib.pyplot.xkcd()

# plt.close(1)
fig = plt.figure(1, figsize=(5,4)) # w,h
fig.clf()
fig.set_tight_layout(True)
ax = fig.add_subplot(111)

# Reformat data for CCI
df = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)\
       .resample('MS')\
       .mean()\
       .to_csv("./MFID/MFID.csv", float_format='%.3f')

df = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)\
       .resample('MS')\
       .mean()\
       .to_csv("./MFID/MFID_err.csv", float_format='%.3f')

df = pd.read_csv("./out/sector_coverage.csv", index_col=0, parse_dates=True)\
       .resample('MS')\
       .mean()\
       .to_csv("./MFID/coverage.csv", float_format='%.3f')

# Graphic
df = pd.read_csv("./out/sector_D.csv", index_col=0, parse_dates=True)\
       .resample('MS')\
       .mean()\

err = pd.read_csv("./out/sector_err.csv", index_col=0, parse_dates=True)\
        .resample('MS')\
        .mean()\

dsum = df.sum(axis='columns')
errsum = err.sum(axis='columns')
dsum.plot(ax=ax, color='k')
ax.fill_between(dsum.index, dsum-errsum, dsum+errsum, color='grey', alpha=0.25)
ax.set_ylabel("Discharge [Gt yr$^{-1}$]")

plt.savefig('./MFID/MFID.png', transparent=False, bbox_inches='tight')
#+END_SRC

#+RESULTS:
:results:
None
:end:



* Meta                                                  :noexport:
:PROPERTIES:
:header-args: :tangle no
:END:

This document probably uses code - python, octave, and/or R. Below I provide the version of the software(s) used to create this document in order to support the goal of reproduciblity. 
*** Emacs
#+BEGIN_SRC elisp
(emacs-version)
#+END_SRC
#+RESULTS:
: GNU Emacs 30.0.91 (build 2, x86_64-pc-linux-gnu, X toolkit, Xaw scroll bars)
:  of 2024-10-15
*** Org Mode
#+BEGIN_SRC elisp
(org-version nil t)
#+END_SRC
#+RESULTS:
: Org mode version 9.7.11 (release_9.7.11 @ /home/shl/local/emacs/share/emacs/30.0.91/lisp/org/)


* Doc


** ATBD
:PROPERTIES:
:header-args: :tangle no
:END:



*** Accuracy table

The algorithm and data product introduced here are closely related to the algorithm and data product introduced by citet:mankoff_2019_ice.  When comparing annual average over all of Greenland, the this product and the product released by citet:mankoff_2019_ice agree well. 

#+NAME: D_compare_ann
#+BEGIN_SRC jupyter-python :session D_val_text :exports results :results raw drawer :eval no-export :kernel sci :session cci_python
import pandas as pd
import numpy as np
this = pd.read_csv('./MFID/MFID.csv', index_col=0, parse_dates=True)
this_err = pd.read_csv('./MFID/MFID_err.csv', index_col=0, parse_dates=True)

D = pd.DataFrame(index = this.index)
D['this'] = this.sum(axis='columns')
D['this_err'] = this_err.sum(axis='columns')
#D.resample("YS").mean()
D = D.resample('YS').mean()
# root = "/home/kdm/data/Mankoff_2019/d/version_01/"
root = "~/mdrev/projects/promice/solid_ice_discharge/dataverse_data/"
m2019 = pd.read_csv(root+'region_D.csv', index_col=0, parse_dates=True)\
          .resample("YS")\
          .mean()\
          .sum(axis='columns')
m2019_err = pd.read_csv(root+'region_err.csv', index_col=0, parse_dates=True)\
              .resample("YS")\
              .mean()\
              .sum(axis='columns')
m2019.name = "m2019"
m2019_err.name = "m2019_err"

D = D.merge(m2019, left_index=True, right_index=True)
D = D.merge(m2019_err, left_index=True, right_index=True)

D['diff'] = D['this'] - D['m2019']
D['diff %'] = D['diff'] / D['this'] * 100

D.index = D.index.astype(str)
D.to_excel('atbd_accuracy_table.xlsx')
print(D)
#+END_SRC

#+CAPTION: Comparison between this product ("this") and citet:mankoff_2019_ice ("m2019")
#+RESULTS: D_compare_ann
:results:
#+begin_example
                  this   this_err       m2019  m2019_err       diff    diff %
Date                                                                         
2014-01-01  463.344333  36.147667  485.920160  45.105618 -22.575827 -4.872365
2015-01-01  471.203083  36.845167  487.331293  45.268997 -16.128210 -3.422773
2016-01-01  474.222250  37.267583  480.022531  44.705177  -5.800281 -1.223114
2017-01-01  488.726333  38.773583  491.535761  45.785530  -2.809428 -0.574847
2018-01-01  486.879750  38.622667  491.077612  45.832890  -4.197862 -0.862197
2019-01-01  489.644083  38.961333  495.909378  46.209912  -6.265295 -1.279561
2020-01-01  494.285250  39.432250  505.964553  47.229431 -11.679303 -2.362867
2021-01-01  496.105500  39.702250  508.115890  47.590573 -12.010390 -2.420935
2022-01-01  463.078333  36.998583  504.059857  47.232895 -40.981524 -8.849804
2023-01-01  467.146833  37.267667  492.099384  46.327375 -24.952551 -5.341479
#+end_example
:end:

Comparing by regions is difficult because this product is binned on the citet:zwally_2012_sectors and citet:mankoff_2019_ice is on the citet:mouginot_2019_glacier regions and sectors.

*** Regions compare this to PROMICE

#+NAME: fig:discharge_ts_regions
#+BEGIN_SRC python :results raw drawer 
import matplotlib.gridspec as gridspec
import numpy as np
import pandas as pd
from adjust_spines import adjust_spines as adj
import datetime as dt
import matplotlib.pyplot as plt

# plt.close(1)

fig = plt.figure(1, figsize=(9,7)) # w,h
fig.clf()
# fig.set_tight_layout(True)
grid = plt.GridSpec(2, 1, height_ratios=[1,6], hspace=0.1) # h, w

ax_D = fig.add_subplot(111)

from adjust_spines import adjust_spines as adj
adj(ax_D, ['left','bottom'])

D = pd.read_csv("./out/region_D.csv", index_col=0, parse_dates=True)
err = pd.read_csv("./out/region_err.csv", index_col=0, parse_dates=True)

ROOT="/home/shl/mdrev/projects/promice/solid_ice_discharge/dataverse_data"
D_M2019 = pd.read_csv(ROOT+"/region_D.csv", index_col=0, parse_dates=True)
err_M2019 = pd.read_csv(ROOT+"/region_err.csv", index_col=0, parse_dates=True)

D_M2019 = D_M2019[(D_M2019.index > D.index[0]) & (D_M2019.index <= D.index[-1])]
err_M2019 = err_M2019[(err_M2019.index > err.index[0]) & (err_M2019.index <= err.index[-1])]

D = D.loc[D.index[:-3]]
err = err.loc[err.index[:-3]]

# | Color       |   R |   G |   B | hex     |
# |-------------+-----+-----+-----+---------|
# | light blue  | 166 | 206 | 227 | #a6cee3 |
# | dark blue   |  31 | 120 | 180 | #1f78b4 |
# | light green | 178 | 223 | 138 | #b2df8a |
# | dark green  |  51 | 160 |  44 | #33a02c |
# | pink        | 251 | 154 | 153 | #fb9a99 |
# | red         | 227 |  26 |  28 | #e31a1c |
# | pale orange | 253 | 191 | 111 | #fdbf6f |
# | orange      | 255 | 127 |   0 | #ff7f00 |
C1="#e31a1c" # red
C2="#1f78b4" # dark blue



MS=4
Z=99
for r in D.columns:
    e = ax_D.errorbar(D[r].index, D[r].values, mfc='none', ms=MS)
    C = e.lines[0].get_color()
    D[r].plot(drawstyle='steps', linewidth=2, ax=ax_D,
              color=C,
              # color='orange'
              alpha=0.75, zorder=Z)
    D_M2019[r].plot(drawstyle='steps',linestyle = '--', linewidth=2, ax=ax_D,
              color=C,
              # color='orange'
              alpha=0.75, zorder=Z)
    ax_D.fill_between(D.index, 
                      (D[r]-err[r]), 
                      (D[r]+err[r]),
                      color=C,
                      #hatch="\\",
                      alpha=0.25)

    ax_D.fill_between(D_M2019.index,
                      (D_M2019[r]-err_M2019[r]), 
                      (D_M2019[r]+err_M2019[r]),
                      color=C,
                      # hatch="/",
                      alpha=0.1)

    tx = D.iloc[-1].name + dt.timedelta(days=50)
    ty = D.iloc[-1][r]
    if r in ['CE', 'SW']: ty=ty-4
    if r == 'NE': ty=ty+4
    if r == 'NO': ty=ty-2
    ax_D.text(tx, ty, r, verticalalignment='center')

#ax_coverage.set_ylabel('Coverage [%]')
#ax_coverage.set_ylim([0,100])
    
import matplotlib.dates as mdates
ax_D.xaxis.set_major_locator(mdates.YearLocator())

ax_D.legend("", framealpha=0)
ax_D.set_xlabel('Time [Years]')
ax_D.set_ylabel('Discharge [Gt yr$^{-1}$]')
# ax_D.set_yscale('log')

# ax_D.xaxis.set_tick_params(rotation=-90)
# for tick in ax_D.xaxis.get_majorticklabels():
#     tick.set_horizontalalignment("left")
plt.show()
plt.savefig('./figs/discharge_ts_regions.png', transparent=False, bbox_inches='tight', dpi=300)
# plt.savefig('./figs/discharge_ts_regions.pdf', transparent=True, bbox_inches='tight', dpi=300)

# Err_pct = (err_day_year.values/D_day_year.values*100).round().astype(np.int).astype(np.str)
# tbl = (D_day_year.round().astype(np.int).astype(np.str) + ' ('+Err_pct+')')
# tbl.index = tbl.index.year.astype(np.str)
# tbl.columns = [_ + ' (Err %)' for _ in tbl.columns]
# tbl
#+END_SRC
